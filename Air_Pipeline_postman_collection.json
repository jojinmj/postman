{
	"info": {
		"_postman_id": "f239f9fb-288c-4608-be56-d9983397a9fe",
		"name": "Air_Pipeline",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11642522"
	},
	"item": [
		{
			"name": "User Token",
			"item": [
				{
					"name": "Driver: Generate Token-Freight Forwarder",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" //************Author: Jojin Manuel*******************//\r",
									"\r",
									"stgenv= \"https://appstaging.atlp.ae/AIRR2\"\r",
									"qaenv= \"http://10.0.131.21/ATLP/AIR\"\r",
									"qatokenURL= \"http://10.0.131.21/ATLP\"\r",
									"stgtokenURL= \"https://appstaging.atlp.ae\"\r",
									"\r",
									"\r",
									"//***Setup the Environment****// QA=1, Stg=2\r",
									"\r",
									"envmnt= 2\r",
									"\r",
									"\r",
									"if (envmnt=== 1) {\r",
									" pm.environment.set(\"baseURL\",qaenv);\r",
									" pm.environment.set(\"tokenURL\",qatokenURL); \r",
									"}\r",
									"if (envmnt=== 2) {\r",
									" pm.environment.set(\"baseURL\",stgenv);\r",
									" pm.environment.set(\"tokenURL\",stgtokenURL); \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"//**Setup the user based on environment*** */\r",
									"env= pm.environment.get(\"baseURL\")\r",
									"\r",
									"if (env == qaenv){\r",
									"   //pm.environment.set(\"loginUser\",\"adso1\");\r",
									"   pm.environment.set(\"loginUser\",\"agility1\");\r",
									"   pm.collectionVariables.set(\"Selected_OrgFF\",\"3FE1175C-F4D1-436A-BC33-7EDF924D322F\");\r",
									"   pm.collectionVariables.set(\"Environment\",\"1\");\r",
									"   pm.collectionVariables.set(\"LoginPwd\",\"hOmM$26@8&2!M^T\"); \r",
									"  }\r",
									"  else\r",
									"  {\r",
									"    pm.environment.set(\"loginUser\",\"agility1\");\r",
									"    pm.collectionVariables.set(\"Selected_OrgFF\",\"272543D6-0C28-4104-B04D-AB70981169F4\");\r",
									"    pm.collectionVariables.set(\"Environment\",\"2\");\r",
									"    pm.collectionVariables.set(\"LoginPwd\",\"hOmM$26@8&2!M^T\");   \r",
									"  }\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"tokenKey\", pm.cookies.get('MAQTA-XSRF-TOKEN'));\r",
									"\r",
									"\r",
									"if (responseCode.code ===200) {\r",
									"  pm.test(\"Token Generated Succesfully\");\r",
									"}\r",
									"else\r",
									"    pm.test(\"Unsuccessful Token Generation, Dependent scripts will fail \");\r",
									"\r",
									"\r",
									"// Setup company code//\r",
									"qa= pm.environment.get(\"baseURL\")\r",
									"\r",
									"if (qa == \"http://10.0.131.21/ATLP\"){\r",
									"   pm.environment.set(\"companyCode\",\"PCSA187\");\r",
									"   //pm.environment.set(\"companyName\",\"Airlink\");\r",
									"   //pm.environment.set(\"companyCode\",\"PCSEXP5467\");\r",
									"  }else {\r",
									"    pm.environment.set(\"companyCode\",\"PCSA187\");  \r",
									"  }\r",
									"\r",
									"var NoC= 1;\r",
									"pm.environment.set(\"TestNo\",NoC); \r",
									"\r",
									"//PCSEXP5467  shameem\r",
									"//PCSEXP25703  adso1"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n\r\n{   \r\n\"userName\":\"{{loginUser}}\",\r\n\"password\": \"{{LoginPwd}}\"\r\n}\r\n\r\n//N@gendraKamath1\r\n//P@ssw0rd",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tokenURL}}/IC/API/api/token/SetAuthCookie",
							"host": [
								"{{tokenURL}}"
							],
							"path": [
								"IC",
								"API",
								"api",
								"token",
								"SetAuthCookie"
							]
						},
						"description": "Driver: This API will driver the entire test. User can set the environment which will help to generate tokens for different users in respective environment"
					},
					"response": []
				},
				{
					"name": "Generate and Set User Token-EASC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" //************Author: Jojin Manuel*******************//\r",
									"\r",
									"stgenv= \"https://appstaging.atlp.ae/AIRR2\"\r",
									"qaenv= \"http://10.0.131.21/ATLP/AIR\"\r",
									"qatokenURL= \"http://10.0.131.21/ATLP\"\r",
									"stgtokenURL= \"https://appstaging.atlp.ae\"\r",
									"\r",
									"\r",
									"//***Setup the Environment****// Value coming from Driver\r",
									"\r",
									"envmnt= pm.collectionVariables.get(\"Environment\")\r",
									"var envmnt = parseInt(envmnt);\r",
									"\r",
									"if (envmnt=== 1) {\r",
									" pm.environment.set(\"baseURL\",qaenv);\r",
									" pm.environment.set(\"tokenURL\",qatokenURL); \r",
									"}\r",
									"if (envmnt=== 2) {\r",
									" pm.environment.set(\"baseURL\",stgenv);\r",
									" pm.environment.set(\"tokenURL\",stgtokenURL); \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"//**Setup the user based on environment*** */\r",
									"env= pm.environment.get(\"baseURL\")\r",
									"\r",
									"if (env == qaenv){\r",
									"   //pm.environment.set(\"loginUser\",\"adso1\");\r",
									"   pm.environment.set(\"EASUser\",\"etihaduser1\");\r",
									"   pm.collectionVariables.set(\"Selected_OrgEAS\",\"715F9A8B-6AA0-4059-AAED-45F67E798379\");   \r",
									"  }\r",
									"  else\r",
									"  {\r",
									"    pm.environment.set(\"EASUser\",\"etihaduser1\");\r",
									"    pm.collectionVariables.set(\"Selected_OrgEAS\",\"891926C0-B9F7-4E79-84C6-323A4336D099\");  \r",
									"  }\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"EASToken\", pm.cookies.get('MAQTA-XSRF-TOKEN'));\r",
									"\r",
									"\r",
									"if (responseCode.code ===200) {\r",
									"  pm.test(\"Token Generated Succesfully\");\r",
									"}\r",
									"else\r",
									"    pm.test(\"Unsuccessful Token Generation, Dependent scripts will fail \");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n\r\n{   \r\n\"userName\":\"{{EASUser}}\",\r\n\"password\": \"hOmM$26@8&2!M^T\"\r\n}\r\n\r\n//N@gendraKamath1\r\n//P@ssw0rd",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tokenURL}}/IC/API/api/token/SetAuthCookie",
							"host": [
								"{{tokenURL}}"
							],
							"path": [
								"IC",
								"API",
								"api",
								"token",
								"SetAuthCookie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and Set User Token-Renomination",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" //************Author: Jojin Manuel*******************//\r",
									"\r",
									"stgenv= \"https://appstaging.atlp.ae/AIRR2\"\r",
									"qaenv= \"http://10.0.131.21/ATLP/AIR\"\r",
									"qatokenURL= \"http://10.0.131.21/ATLP\"\r",
									"stgtokenURL= \"https://appstaging.atlp.ae\"\r",
									"\r",
									"\r",
									"//***Setup the Environment****// Value coming from Driver\r",
									"\r",
									"envmnt= pm.collectionVariables.get(\"Environment\")\r",
									"var envmnt = parseInt(envmnt);\r",
									"\r",
									"if (envmnt=== 1) {\r",
									" pm.environment.set(\"baseURL\",qaenv);\r",
									" pm.environment.set(\"tokenURL\",qatokenURL); \r",
									"}\r",
									"if (envmnt=== 2) {\r",
									" pm.environment.set(\"baseURL\",stgenv);\r",
									" pm.environment.set(\"tokenURL\",stgtokenURL); \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"//**Setup the user based on environment*** */\r",
									"env= pm.environment.get(\"baseURL\")\r",
									"\r",
									"if (env == qaenv){\r",
									"   //pm.environment.set(\"loginUser\",\"adso1\");\r",
									"   pm.environment.set(\"RenominationUser\",\"dhl1\");\r",
									"   pm.collectionVariables.set(\"Selected_OrgRenom\",\"BD1E0E4C-A3D7-4D4B-9C8F-AF5C108F36BE\");   \r",
									"  }\r",
									"  else\r",
									"  {\r",
									"    pm.environment.set(\"RenominationUser\",\"dhl1\");\r",
									"    pm.collectionVariables.set(\"Selected_OrgRenom\",\"CB8295F8-28C5-4833-AAEA-C6D209FABB2F\");  \r",
									"  }\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"RenominationToken\", pm.cookies.get('MAQTA-XSRF-TOKEN'));\r",
									"pm.environment.set(\"tokenKeyDHL\", pm.cookies.get('MAQTA-XSRF-TOKEN'));\r",
									"\r",
									"\r",
									"if (responseCode.code ===200) {\r",
									"  pm.test(\"Token Generated Succesfully\");\r",
									"}\r",
									"else\r",
									"    pm.test(\"Unsuccessful Token Generation, Dependent scripts will fail \");\r",
									"\r",
									"\r",
									"// Setup company code//\r",
									"qa= pm.environment.get(\"baseURL\")\r",
									"\r",
									"\r",
									"//PCSEXP5467  shameem\r",
									"//PCSEXP25703  adso1"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n\r\n{   \r\n\"userName\":\"{{RenominationUser}}\",\r\n\"password\": \"hOmM$26@8&2!M^T\"\r\n}\r\n\r\n//N@gendraKamath1\r\n//P@ssw0rd",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tokenURL}}/IC/API/api/token/SetAuthCookie",
							"host": [
								"{{tokenURL}}"
							],
							"path": [
								"IC",
								"API",
								"api",
								"token",
								"SetAuthCookie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and Set User Token-Agent_Airlink",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" //************Author: Jojin Manuel*******************//\r",
									"\r",
									"stgenv= \"https://appstaging.atlp.ae/AIRR2\"\r",
									"qaenv= \"http://10.0.131.21/ATLP/AIR\"\r",
									"qatokenURL= \"http://10.0.131.21/ATLP\"\r",
									"stgtokenURL= \"https://appstaging.atlp.ae\"\r",
									"\r",
									"\r",
									"//***Setup the Environment****// Value coming from Driver\r",
									"\r",
									"envmnt= pm.collectionVariables.get(\"Environment\")\r",
									"var envmnt = parseInt(envmnt);\r",
									"\r",
									"if (envmnt=== 1) {\r",
									" pm.environment.set(\"baseURL\",qaenv);\r",
									" pm.environment.set(\"tokenURL\",qatokenURL); \r",
									"}\r",
									"if (envmnt=== 2) {\r",
									" pm.environment.set(\"baseURL\",stgenv);\r",
									" pm.environment.set(\"tokenURL\",stgtokenURL); \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"//**Setup the user based on environment*** */\r",
									"env= pm.environment.get(\"baseURL\")\r",
									"\r",
									"if (env == qaenv){\r",
									"   //pm.environment.set(\"loginUser\",\"adso1\");\r",
									"   pm.environment.set(\"RenominationUser\",\"airlink1\");\r",
									"   pm.collectionVariables.set(\"Selected_OrgAgtB\",\"6F21B46D-8A25-4C51-A52C-54F1CA47F5C6\");   \r",
									"  }\r",
									"  else\r",
									"  {\r",
									"    pm.environment.set(\"RenominationUser\",\"airlink1\");\r",
									"   pm.collectionVariables.set(\"Selected_OrgAgtB\",\"D9552719-DB25-4CF6-9AA7-915F886B7D66\");    \r",
									"  }\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"tokenKeyAirLink\", pm.cookies.get('MAQTA-XSRF-TOKEN'));\r",
									"\r",
									"\r",
									"if (responseCode.code ===200) {\r",
									"  pm.test(\"Token Generated Succesfully\");\r",
									"}\r",
									"else\r",
									"    pm.test(\"Unsuccessful Token Generation, Dependent scripts will fail \");\r",
									"\r",
									"\r",
									"// Setup company code//\r",
									"qa= pm.environment.get(\"baseURL\")\r",
									"\r",
									"\r",
									"//PCSEXP5467  shameem\r",
									"//PCSEXP25703  adso1"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n\r\n{   \r\n\"userName\":\"{{RenominationUser}}\",\r\n\"password\": \"hOmM$26@8&2!M^T\"\r\n}\r\n\r\n//N@gendraKamath1\r\n//P@ssw0rd",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tokenURL}}/IC/API/api/token/SetAuthCookie",
							"host": [
								"{{tokenURL}}"
							],
							"path": [
								"IC",
								"API",
								"api",
								"token",
								"SetAuthCookie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and Set User Token-Agent_DHL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" //************Author: Jojin Manuel*******************//\r",
									"\r",
									"stgenv= \"https://appstaging.atlp.ae/AIRR2\"\r",
									"qaenv= \"http://10.0.131.21/ATLP/AIR\"\r",
									"qatokenURL= \"http://10.0.131.21/ATLP\"\r",
									"stgtokenURL= \"https://appstaging.atlp.ae\"\r",
									"\r",
									"\r",
									"//***Setup the Environment****// Value coming from Driver\r",
									"\r",
									"envmnt= pm.collectionVariables.get(\"Environment\")\r",
									"var envmnt = parseInt(envmnt);\r",
									"\r",
									"if (envmnt=== 1) {\r",
									" pm.environment.set(\"baseURL\",qaenv);\r",
									" pm.environment.set(\"tokenURL\",qatokenURL); \r",
									"}\r",
									"if (envmnt=== 2) {\r",
									" pm.environment.set(\"baseURL\",stgenv);\r",
									" pm.environment.set(\"tokenURL\",stgtokenURL); \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"//**Setup the user based on environment*** */\r",
									"env= pm.environment.get(\"baseURL\")\r",
									"\r",
									"if (env == qaenv){\r",
									"   //pm.environment.set(\"loginUser\",\"adso1\");\r",
									"   pm.environment.set(\"RenominationUser\",\"dhl1\");\r",
									"   pm.collectionVariables.set(\"SelectedOrg_DHL\",\"BD1E0E4C-A3D7-4D4B-9C8F-AF5C108F36BE\");   \r",
									"  }\r",
									"  else\r",
									"  {\r",
									"    pm.environment.set(\"RenominationUser\",\"dhl1\");\r",
									"   pm.collectionVariables.set(\"SelectedOrg_DHL\",\"CB8295F8-28C5-4833-AAEA-C6D209FABB2F\");    \r",
									"  }\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"tokenKeyDHL\", pm.cookies.get('MAQTA-XSRF-TOKEN'));\r",
									"\r",
									"\r",
									"if (responseCode.code ===200) {\r",
									"  pm.test(\"Token Generated Succesfully\");\r",
									"}\r",
									"else\r",
									"    pm.test(\"Unsuccessful Token Generation, Dependent scripts will fail \");\r",
									"\r",
									"\r",
									"// Setup company code//\r",
									"qa= pm.environment.get(\"baseURL\")\r",
									"\r",
									"\r",
									"//PCSEXP5467  shameem\r",
									"//PCSEXP25703  adso1"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n\r\n{   \r\n\"userName\":\"{{RenominationUser}}\",\r\n\"password\": \"hOmM$26@8&2!M^T\"\r\n}\r\n\r\n//N@gendraKamath1\r\n//P@ssw0rd",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tokenURL}}/IC/API/api/token/SetAuthCookie",
							"host": [
								"{{tokenURL}}"
							],
							"path": [
								"IC",
								"API",
								"api",
								"token",
								"SetAuthCookie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate and Set Token- ADSO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" //************Author: Jojin Manuel*******************//\r",
									"\r",
									"stgenvcustoms= \"https://appstaging.atlp.ae/IC/API/api/Customs\"\r",
									"qaenvcustoms= \"http://10.0.131.21/ATLP/IC/API/api/Customs\"\r",
									"qatokenURL= \"http://10.0.131.21/ATLP\"\r",
									"stgtokenURL= \"https://appstaging.atlp.ae\"\r",
									"\r",
									"\r",
									"\r",
									"//***Setup the Environment****// QA=1, Stg=2\r",
									"\r",
									"envmnt= pm.collectionVariables.get(\"Environment\")\r",
									"var envmnt = parseInt(envmnt);\r",
									"\r",
									"if (envmnt=== 1) {\r",
									" pm.environment.set(\"customsbaseURL\",qaenvcustoms);\r",
									" pm.environment.set(\"tokenURL\",qatokenURL);\r",
									"}\r",
									"\r",
									"\r",
									"if (envmnt=== 2) {\r",
									" pm.environment.set(\"customsbaseURL\",stgenvcustoms);\r",
									" pm.environment.set(\"tokenURL\",stgtokenURL);\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"//**Setup the user based on environment*** */\r",
									"env= pm.environment.get(\"customsbaseURL\")\r",
									"\r",
									"if (env == qaenvcustoms){\r",
									"   pm.environment.set(\"loginUser\",\"adso1\");\r",
									"   pm.collectionVariables.set(\"Selected_Org\",\"38EF0A10-1269-491C-BB93-6E5622F9ACBA\");\r",
									"    pm.environment.set(\"jobnoImp\",\"20036939\");\r",
									"    pm.environment.set(\"jobnoExp\",\"20037295\");   \r",
									"  }\r",
									"  else\r",
									"  {\r",
									"    pm.environment.set(\"loginUser\",\"adso1\");\r",
									"    //pm.collectionVariables.set(\"Selected_Org\",\"272543D6-0C28-4104-B04D-AB70981169F4\");\r",
									"    pm.collectionVariables.set(\"Selected_Org\",\"046403BF-18D9-4A1E-8A04-5FEE1D25B5B8\");\r",
									"    pm.environment.set(\"jobnoImp\",\"20036939\");\r",
									"    pm.environment.set(\"jobnoExp\",\"20037295\");  \r",
									"  }\r",
									"\r",
									"  //shameem.pilathodan\r",
									"  //adso1"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"tokenadso\", pm.cookies.get('MAQTA-XSRF-TOKEN'));\r",
									"\r",
									"pm.test(\"Token Generation\", function () {    \r",
									"   if (responseCode.code ===200) {\r",
									"        pm.test(\"Verified: Token Generated Succesfully\")\r",
									"    }\r",
									"       else if(responseCode.code != 200) {\r",
									"        pm.expect.fail(\"Unsuccessful Token Generation, Dependent scripts will fail\")\r",
									"       } \r",
									"});  \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n\r\n{   \r\n\"userName\":\"{{loginUser}}\",\r\n\"password\": \"hOmM$26@8&2!M^T\"\r\n}\r\n\r\n//P@ssw0rd\r\n//N@gendraKamath1",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tokenURL}}/IC/API/api/token/SetAuthCookie",
							"host": [
								"{{tokenURL}}"
							],
							"path": [
								"IC",
								"API",
								"api",
								"token",
								"SetAuthCookie"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Heavy Cargo",
			"item": [
				{
					"name": "Add Shipments + Create appt- Agility",
					"item": [
						{
							"name": "Imports: Add MAWB Shipment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"MAWB= Math.floor(10000000 + Math.random() * 90000000)\r",
											"pm.environment.set(\"addMAWB\",MAWB);\r",
											"\r",
											"//1- Aramex, 2-DHL, 3-  Agility, 4- Airlink, 5- Rais, 6- ADSO\r",
											"\r",
											"company= 3\r",
											"\r",
											"if (company=== 1) {\r",
											" pm.environment.set(\"companyName\",\"ARAMEX ABU DHABI\"); \r",
											" pm.environment.set(\"companyCode\",\"REG01760\");  \r",
											"}\r",
											"\r",
											"if (company=== 2) {\r",
											"pm.environment.set(\"companyName\",\"DHL GLOBAL FORWARDING\"); \r",
											"pm.environment.set(\"companyCode\",\"ComLSN263110\");  \r",
											"}\r",
											"\r",
											"if (company=== 3) {\r",
											"pm.environment.set(\"companyName\",\"AGILITY LOGISTICS\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA187\"); \r",
											"}\r",
											"\r",
											"if (company=== 4) {\r",
											"pm.environment.set(\"companyName\",\"AIRLINK INTERNATIONAL\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSML04\"); \r",
											"}\r",
											"\r",
											"if (company=== 5) {\r",
											"pm.environment.set(\"companyName\",\"RAIS HASSAN SAADI AND COMPANY LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA22\"); \r",
											"}\r",
											"\r",
											"if (company=== 6) {\r",
											"pm.environment.set(\"companyName\",\"ADSO LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSEXP25703\"); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-selected-org",
										"value": "",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n   \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": null,\r\n  \"airportCode\":\"AUH\",\r\n   \"carrierCode\":\"EY\",\r\n   \"originCode\":\"DEL\",\r\n   \"destinationCode\":\"AUH\",\r\n   \"quantity\":\"10\",\r\n   \"quantityUnit\":\"pcs\",\r\n   \"grossWeight\":\"111\",\r\n   \"grossWeightUnit\":\"kgs\",\r\n   \"chargeableWeight\":\"111\",\r\n   \"chargeableWeightUnit\":\"kgs\",\r\n   \"commodityDescription\":\"API Collections\",\r\n   \"Comments\":\"Dated {{today}}: AS ADDRESSED FLY AS BOOKED CARGO NOTIFY CONSIGNEE UPON ARRIVAL DOCS DOCS  ATTACHED PLEASE HANDLE WITH CARE PLEASE HANDLE WITH  CAREREFRACTORY MATERIAL INV NO 107000181 DT. 23.12.2020 CMT98-88-62X1\",\r\n   \"shcCode\":\"EAP,HEA\",\r\n   \"shipmentStatus\": \"Arrived\",\r\n   \"shipmentCode\":\"T\",\r\n   \"messageType\":\"FWB\",\r\n   \"shipperDetails\":{\r\n      \"shipperName\":\"FAIR NEW EXPORTS INDIA PVT. LTD.\",\r\n      \"shipperAddress\":\"20 1 SITE IV INDUSTRIAL AREA SAHIBABAD\",\r\n      \"shipperPlace\":\"GHAZIABAD\",\r\n      \"shipperState\":\"UP\",\r\n      \"shipperCountryCode\":\"IN\",\r\n      \"shipperPostalCode\":\"600000\",\r\n      \"shipperContactNo\":\"545452\"\r\n   },\r\n   \"consigneeDetails\":{\r\n      \"consigneeName\":\"AL TAYEB INTERNATIONAL GENERAL TRADING LLC.\",\r\n      \"consigneeAddress\":\"PREMISE NUMBER 416996710 PO BOX NO410780 416 NAD AL HAMAR\",\r\n      \"consigneePlace\":\"DUBAI\",\r\n      \"consigneeState\":\"DUBAI\",\r\n      \"consigneeCountryCode\":\"AE\",\r\n      \"consigneePostalCode\":\"410780\",\r\n      \"consigneeContactNo\":\"654665\"\r\n   },\r\n   \"agentDetails\":{\r\n      \"agentName\":\"{{companyName}}\",\r\n      \"agentClassCode\":\"1431021\",\r\n      \"agentPlaceIssue\":\"NEW DELHI\"\r\n   }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add HAWB Shipments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWB= Math.floor(100000 + Math.random() * 99999)\r",
											"pm.environment.set(\"addHAWB\",HAWB);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Verify the MAWB is created\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    pm.expect(response.data).to.equal(\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": \"SFO{{addHAWB}}\",\r\n  \"airportCode\": \"AUH\",\r\n  \"carrierCode\": \"EY\",\r\n  \"originCode\": \"MLB\",\r\n  \"destinationCode\": \"AUH\",\r\n  \"quantity\": \"10\",\r\n  \"quantityUnit\": \"pcs\",\r\n  \"grossWeight\": \"100.00\",\r\n  \"grossWeightUnit\": \"kgs\",\r\n  \"chargeableWeight\": \"100.00\",\r\n  \"chargeableWeightUnit\": \"kgs\",\r\n  \"commodityGroup\": \"Pharaceuticals\",\r\n  \"commodityDescription\": \"vaccines\",\r\n   \"Comments\":\"please handle dangerous goods with care\",\r\n  \"billofEntryNo\": null,\r\n  \"shipmentStatus\": \"Arrived\",\r\n  \"shcCode\": \"EAP\",\r\n  \"shipmentCode\":\"T\",\r\n  \"messageType\":\"FHL\",\r\n   \"shipperDetails\": {\r\n    \"shipperName\": \"DHL Melbourne\",\r\n    \"shipperAddress\": \"Victoria\",\r\n    \"shipperPlace\": \"Melbourne\",\r\n    \"shipperState\": \"Victoria\",\r\n    \"shipperCountryCode\": \"Australia\",\r\n    \"shipperPostalCode\": \"122222\",\r\n    \"shipperContactNo\": \"971676666\"\r\n  },\r\n  \"consigneeDetails\": {\r\n    \"consigneeName\": \"Kuehne + Nagel International AG\",\r\n    \"consigneeAddress\": \"Airport Road\",\r\n    \"consigneePlace\": \"Abu Dhabi\",\r\n    \"consigneeState\": \"Abu Dhabi\",\r\n    \"consigneeCountryCode\": \"UAE\",\r\n    \"consigneePostalCode\": \"122\",\r\n    \"consigneeContactNo\": \"97877878787\"\r\n  },\r\n  \"agentDetails\": {    \r\n    \"agentName\": \"FedEx\",\r\n    \"agentClassCode\": null,\r\n    \"agentPlaceIssue\": null\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Flight Schedule 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Flight Schedules Added/Updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"yesterday\",str1);\r",
											"\r",
											"fNo= Math.floor(100 + Math.random() * 9999)\r",
											"pm.environment.set(\"flightNo\",fNo);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FlightDetails\": [\r\n        {\r\n            \"origin\": \"DEL\",\r\n            \"destination\": \"AUH\",\r\n            \"carrierCode\": \"EY\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"estimatedArrival\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"FlightType\": \"P\",\r\n            \"Routing\": null,\r\n            \"FlightQualifier\": \"A\",\r\n            \"AirCraftType\": \"781\",\r\n            \"ParkingStand\": \"301\",\r\n            \"Gate\": \"70\",\r\n            \"RegistrationNumber\": \"A6BMB\",\r\n            \"CustomsReference\": \"A123\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-schedules",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-schedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Flight Details- Import  1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    //pm.expect(response.data).to.equal(\"Shipment flight detail successfully updated\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"rcvdDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"ShipmentType\": \"Import\",\r\n  \"messageType\": \"FFM\",\r\n  \"receivedDate\": \"{{rcvdDate}}\",\r\n  \"OriginDepartureInfo\": {\r\n    \"FlightNumber\": \"EY{{flightNo}}\",\r\n    \"scheduleDate\": \"{{yesterday}}\",\r\n    \"Airport\": \"DEL\",\r\n    \"AirCarftRegistration\": \"A6EIW\",\r\n    \"FirstPtOfArrival\": null\r\n  },\r\n  \"ManifestDetails\": {\r\n    \"ArrivalInfo\": {\r\n      \"airportCode\": \"AUH\",\r\n      \"ScheduledArrival\": \"{{yesterday}}\"\r\n    },\r\n    \"MAWB\": [\r\n      {\r\n        \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n        \"OriginCode\": \"DEL\",\r\n        \"shipmentCode\": \"T\",\r\n        \"DestinationCode\": \"AUH\",\r\n        \"quantity\": 200,\r\n        \"grossWeight\": 1450,\r\n        \"grossWeightUnit\": \"kgs\",\r\n        \"ULDNumber\": null,\r\n        \"IsBulk\": 1,\r\n        \"TotalQuantity\": 0,\r\n        \"GoodsDescription\": \"WATCH  WATCH BO\"\r\n      }\r\n        \r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-manifest",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-manifest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Pre DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Pre Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment')\r",
											"pm.environment.set(\"doNumber\", moment().format(\"DDMMYYYYHHMMSS\"))\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"Notes\": \"The above pre-arrival information can be used to initiate a Customs entry process through the Customs Portal. Once the cargo has been received, an updated message will be sent, showing the exact pieces and weight received, for this Delivery Order number.\",\r\n  \"NotifyDetails\": null,\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"EMIRATES SPECIALIZED CONTRACTING #{{TestNo}}\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{yesterday}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 200,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 1000.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP,ECC,GEN,GPA,TRB\",\r\n    \"TotalQuantity\": 200,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 1000.0,\r\n    \"TotalGrossWeightUnit\":\"\"    \r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 88,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 888.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 77,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 888.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"MACHINE PARTS\",\r\n    \"HandlingCodes\": \"NSC,SHR,COM,ECP,ECC\"\r\n  },\r\n  \"documentType\": \"PreDO\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate()-1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"IssueDate\",str);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FreightArrivalDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"IssueDate\": \"{{IssueDate}}\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"NotifyDetails\": \"Etihad Airport Services EAS\",\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"PoBox\": \"93971\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"New Mahe\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{FlightArrivalDate}}\",\r\n    \"FreightArrivalDate\": \"{{FreightArrivalDate}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 10,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 111.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP\",\r\n    \"TotalQuantity\": 101,\r\n    \"TotalQuantityUnit\":\"pcs\",\r\n    \"TotalGrossWeight\": 101.0,\r\n    \"TotalGrossWeightUnit\":\"kgs\",\r\n    \"ChargeableWeight\": 202.0,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"rcfQuantity\": 10,\r\n    \"rcfWeight\": 111\r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 10,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 100.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 100,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 100.00,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"ChargeableWeight\": 111.00,\r\n    \"rcfQuantity\": 10,\r\n    \"rcfWeight\": 104,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"NatureofGoods\": \"Machine pars such as propellot and turbines which are used for aircrafts.\",\r\n    \"HandlingCodes\": \"\"\r\n  },\r\n  \"documentType\": \"DO\",\r\n  \"ProcessedBy\": \"etihadsupervisor@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add BOE details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWBNO=pm.environment.get(\"addHAWB\");\r",
											"pm.globals.set(\"HAWBNOAppt\",HAWBNO);\r",
											"\r",
											"MAWBNO=pm.environment.get(\"addMAWB\");\r",
											"pm.globals.set(\"MAWBNOAppt\",MAWBNO);\r",
											"\r",
											"FlightNo=pm.environment.get(\"flightNo\");\r",
											"pm.globals.set(\"FlightNoAppt\",FlightNo);\r",
											"\r",
											"FlightDate=pm.environment.get(\"yesterday\");\r",
											"pm.globals.set(\"DateAppt\",FlightDate);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Bill of entry updated successfully\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Bill of entry updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    //pm.expect(response.data).to.equal(null,\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n    \"ShipmentType\": \"Import\",\r\n    \"houseAwbNumber\": \"SFO{{addHAWB}}\",        \r\n    \"billofEntryNo\": \"I/2020/{{addHAWB}}\",\r\n    \"customStatus\": \"RED\"\r\n}\r\n\r\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment/billofentry",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment",
										"billofentry"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Get Timeslots Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp)\r",
											"//current_timestamp.setDate(current_timestamp.getUTCDate() + 1);\r",
											"current_timestamp.setDate(current_timestamp.getDate() + 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 10).replace(\"T\", \" \"))\r",
											"pm.environment.set(\"nextDay\",str);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Timeslots loaded Successfully\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.msg).to.eql(\"Time slots loaded successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify fetched slots are active\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var index = 0; index <= 1; index++) {\r",
											"        pm.expect(jsonData.data[index].active).to.eql(true);     \r",
											"    }  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// set timeslot as environment variable\r",
											"var response = JSON.parse(responseBody);\r",
											"impTS = response.data[2].slotTime\r",
											"impTS = impTS.slice(0, 13)\r",
											"pm.environment.set(\"impTimeSlot\", impTS)\r",
											"impSid=response.data[2].slotCode\r",
											"pm.environment.set(\"impSlotID\", impSid)\r",
											"slotstart=response.data[2].slotStartTime\r",
											"pm.environment.set(\"slotStart\", slotstart)\r",
											"slotend=response.data[2].slotEndTime\r",
											"pm.environment.set(\"slotEnd\", slotend)\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"appointmentDate\": \"{{nextDay}}\",\r\n  \"slotType\": \"Regular\",\r\n  \"vct\": 1,\r\n  \"shipments\": [\r\n    {\r\n      \"mawbNo\": null,\r\n      \"awbNo\": \"AWB-00-001\",\r\n      \"terminalCode\": \"HCT\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    },{\r\n      \"mawbNo\": \"AWB-00-001\",\r\n      \"awbNo\": \"HBL-00-001\",\r\n      \"terminalCode\": \"HCT\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment/import-timeslots",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment",
										"import-timeslots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Create Appointment Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status;\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    status = pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"       \r",
											"});\r",
											"\r",
											"if(status == 500){\r",
											"    pm.test(\"Appointment date is less than current date\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var myvar = jsonData.errorlst[0].error;    \r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Appointment Created Successfully\",function(){\r",
											"    var jsonData = pm.response.json();   \r",
											"    var appNo = jsonData.data.appointmentNo;\r",
											"    pm.test(\"Appointment Number - \"+appNo); \r",
											"    postman.setEnvironmentVariable(\"appointmentNo\", appNo);\r",
											"    postman.setEnvironmentVariable(\"ApptNo\", appNo);\r",
											"    pm.expect(jsonData.msg).to.eql(\"Appointment saved successfully\");\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp.toISOString())\r",
											"current_timestamp.setHours(current_timestamp.getHours() + 2); \r",
											"//console.log(current_timestamp.toISOString())\r",
											"pm.environment.set(\"current_timestamp\", current_timestamp.toISOString());\r",
											"\r",
											"vNo= Math.floor(100000 + Math.random() * 900000)\r",
											"pm.environment.set(\"vehicleNoappt\",vNo);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"appointmentNo\": null,\r\n    \"referenceID\": \"\",\r\n    \"appointmentDate\": \"{{nextDay}}\",\r\n    \"type\": \"imports\",\r\n    \"slotType\": \"Regular\",\r\n    \"slotTime\": \"{{impTimeSlot}}\",\r\n    \"paymentTerm\": \"Direct Checkin(Credit)\",\r\n    \"contactName\": \"Thomas Muller\",\r\n    \"contactEmail\": \"balakumaran.govardha@maqta.ae\",\r\n    \"contactNumber\": \"051468761\",\r\n    \"companyName\":\"AGILITY LOGISTICS\",\r\n    \"status\": \"Confirmed\",\r\n    \"slotCode\": \"{{impSlotID}}\",\r\n    \"slotStartTime\": \"{{slotStart}}\",\r\n    \"slotEndTime\": \"{{slotEnd}}\",\r\n    \"cargoType\": \"\",\r\n    \"awbDetails\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"b4d574a5-9880-4f2a-9aea-e882ea2328b5\",\r\n            \"awbReferenceNumber\": \"607-{{addMAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 200,\r\n            \"grossWeight\": 1450,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 1000,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"terminalCode\": \"HCT\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": \"EY\",\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04\",\r\n            \"shcCode\": \"EAP,API\",\r\n            \"MawbTerminalCode\": \"HCT\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        },\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"f45e4c87-526c-4eb1-8623-2506abb58951\",\r\n            \"awbReferenceNumber\": \"SFO{{addHAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 10,\r\n            \"grossWeight\": 1000,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 111,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"parentAWBReference\": \"607-{{addMAWB}}\",\r\n            \"terminalCode\": \"HCT\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": null,\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04\",\r\n            \"shcCode\": \"EAP\",\r\n            \"MawbTerminalCode\": \"HCT\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        }\r\n    ],\r\n    \"driverVehicles\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"driverName\": \"Thomas Muller\",\r\n            \"driverContactNo\": \"051468761\",\r\n            \"vehicleNo\": \"{{vehicleNoappt}}\",\r\n            \"vehicleType\": \"3 Ton\",\r\n            \"active\": true,\r\n            \"createdDate\": \"{{yesterday}}\",\r\n            \"createdBy\": \"System\",\r\n            \"checked\": true\r\n        }\r\n    ],\r\n    \"palletPieces\": 0,\r\n    \"nonPalletPieces\": 0,\r\n    \"appointmentDocuments\": [],\r\n    \"appointmentAdditionalServiceDTO\": [],\r\n    \"SpecialHanInstn\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Payment Charges Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status;\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    status = pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"       \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Appointment confirmed Successfully\",function(){\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.msg).to.eql(\"Freight charges payment saved successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-awbcharges",
										"value": "[{\"Key\":\"MAWB\",\"Value\":\"607-{{addMAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":\"T\"},{\"Key\":\"HAWB\",\"Value\":\"SFO{{addHAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":\"T\"},{\"Key\":\"MAWB\",\"Value\":\"607-{{addMAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":null}]",
										"type": "text",
										"disabled": true
									},
									{
										"key": "paymentType",
										"value": "Direct Checkin(Credit)",
										"type": "text",
										"disabled": true
									},
									{
										"key": "refereneceNo",
										"value": "{{appointmentNo}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "appointmentDate",
										"value": "{{nextDay}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "slottime",
										"value": "{{impTimeSlot}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AwbCharges\": [\r\n        {\r\n            \"Key\": \"MAWB\",\r\n            \"Value\": \"607-{{addMAWB}}\",\r\n            \"FlightNumber\": \"EY{{flightNo}}\",\r\n            \"FlightDate\": \"{{yesterday}}\",\r\n            \"ShipmentCode\": \"T\"\r\n        },\r\n        {\r\n            \"Key\": \"HAWB\",\r\n            \"Value\": \"SFO{{addHAWB}}\",\r\n            \"FlightNumber\": \"EY{{flightNo}}\",\r\n            \"FlightDate\": \"{{yesterday}}\",\r\n            \"ShipmentCode\": \"T\"\r\n        }        \r\n    ],\r\n    \"refereneceNo\": \"{{appointmentNo}}\",\r\n    \"appointmentDate\": \"{{nextDay}}\",\r\n    \"SlotTime\": \"{{impTimeSlot}}\",\r\n    \"paymentType\": \"Direct Checkin(Credit)\",    \r\n    \"SlotType\": \"Regular\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Charges/import-shipment/payment-freight-charges",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Charges",
										"import-shipment",
										"payment-freight-charges"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.request.headers.add({ key: 'x-selected-org', value: pm.collectionVariables.get(\"Selected_OrgFF\")});",
									"",
									" pm.request.headers.add({key:'x-client-Id',value: 'EB30882C-C83D-468D-9A8A-CB23822203D7' });",
									"",
									"  pm.request.headers.add({key:'x-client-secret',value: 'NLzDQknON4yPgd1EOyeI1h7FyvpAWOLpWFkrtjCN4fITb039OmnlyLUOXwPWlJsn3EHur2HUO3PHRnaRY3vwaw53nOaPd8V3VPuZUHxpI8kPKvJPoQx0DzRIrXYV5aDW5hZnwhYC5cII0fv7IGwLz4iA00TK2upvI7p4cLnLTe4hpJuWpvjkB5N1CwRHmYjflg0x7YH3YhlMlVOIvZtDjvEUfTxsVPX6CnJlNa32lyrDgu7yyJz6syeG5gtZ56Bi' });",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Add Shipments + Create appt- DHL",
					"item": [
						{
							"name": "Imports: Add MAWB Shipment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"MAWB= Math.floor(10000000 + Math.random() * 90000000)\r",
											"pm.environment.set(\"addMAWB\",MAWB);\r",
											"\r",
											"//1- Aramex, 2-DHL, 3-  Agility, 4- Airlink, 5- Rais, 6- ADSO\r",
											"\r",
											"company= 2\r",
											"\r",
											"if (company=== 1) {\r",
											" pm.environment.set(\"companyName\",\"ARAMEX ABU DHABI\"); \r",
											" pm.environment.set(\"companyCode\",\"REG01760\");  \r",
											"}\r",
											"\r",
											"if (company=== 2) {\r",
											"pm.environment.set(\"companyName\",\"DHL GLOBAL FORWARDING\"); \r",
											"pm.environment.set(\"companyCode\",\"ComLSN263110\");  \r",
											"}\r",
											"\r",
											"if (company=== 3) {\r",
											"pm.environment.set(\"companyName\",\"AGILITY LOGISTICS\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA187\"); \r",
											"}\r",
											"\r",
											"if (company=== 4) {\r",
											"pm.environment.set(\"companyName\",\"AIRLINK INTERNATIONAL\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSML04\"); \r",
											"}\r",
											"\r",
											"if (company=== 5) {\r",
											"pm.environment.set(\"companyName\",\"RAIS HASSAN SAADI AND COMPANY LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA22\"); \r",
											"}\r",
											"\r",
											"if (company=== 6) {\r",
											"pm.environment.set(\"companyName\",\"ADSO LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSEXP25703\"); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-selected-org",
										"value": "",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n   \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": null,\r\n  \"airportCode\":\"AUH\",\r\n   \"carrierCode\":\"EY\",\r\n   \"originCode\":\"DEL\",\r\n   \"destinationCode\":\"AUH\",\r\n   \"quantity\":\"200\",\r\n   \"quantityUnit\":\"pcs\",\r\n   \"grossWeight\":\"222\",\r\n   \"grossWeightUnit\":\"kgs\",\r\n   \"chargeableWeight\":\"212\",\r\n   \"chargeableWeightUnit\":\"kgs\",\r\n   \"commodityDescription\":\"API Collections\",\r\n   \"Comments\":\"Dated {{today}}: AS ADDRESSED FLY AS BOOKED CARGO NOTIFY CONSIGNEE UPON ARRIVAL DOCS DOCS  ATTACHED PLEASE HANDLE WITH CARE PLEASE HANDLE WITH  CAREREFRACTORY MATERIAL INV NO 107000181 DT. 23.12.2020 CMT98-88-62X1\",\r\n   \"shcCode\":\"EAP,API\",\r\n   \"shipmentStatus\": \"Arrived\",\r\n   \"shipmentCode\":\"T\",\r\n   \"messageType\":\"FWB\",\r\n   \"shipperDetails\":{\r\n      \"shipperName\":\"FAIR NEW EXPORTS INDIA PVT. LTD.\",\r\n      \"shipperAddress\":\"20 1 SITE IV INDUSTRIAL AREA SAHIBABAD\",\r\n      \"shipperPlace\":\"GHAZIABAD\",\r\n      \"shipperState\":\"UP\",\r\n      \"shipperCountryCode\":\"IN\",\r\n      \"shipperPostalCode\":\"600000\",\r\n      \"shipperContactNo\":\"545452\"\r\n   },\r\n   \"consigneeDetails\":{\r\n      \"consigneeName\":\"AL TAYEB INTERNATIONAL GENERAL TRADING LLC.\",\r\n      \"consigneeAddress\":\"PREMISE NUMBER 416996710 PO BOX NO410780 416 NAD AL HAMAR\",\r\n      \"consigneePlace\":\"DUBAI\",\r\n      \"consigneeState\":\"DUBAI\",\r\n      \"consigneeCountryCode\":\"AE\",\r\n      \"consigneePostalCode\":\"410780\",\r\n      \"consigneeContactNo\":\"654665\"\r\n   },\r\n   \"agentDetails\":{\r\n      \"agentName\":\"{{companyName}}\",\r\n      \"agentClassCode\":\"1431021\",\r\n      \"agentPlaceIssue\":\"NEW DELHI\"\r\n   }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add HAWB Shipments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWB= Math.floor(100000 + Math.random() * 99999)\r",
											"pm.environment.set(\"addHAWB\",HAWB);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Verify the MAWB is created\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    pm.expect(response.data).to.equal(\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": \"SFO{{addHAWB}}\",\r\n  \"airportCode\": \"AUH\",\r\n  \"carrierCode\": \"EY\",\r\n  \"originCode\": \"MLB\",\r\n  \"destinationCode\": \"AUH\",\r\n  \"quantity\": \"10\",\r\n  \"quantityUnit\": \"pcs\",\r\n  \"grossWeight\": \"1000.00\",\r\n  \"grossWeightUnit\": \"kgs\",\r\n  \"chargeableWeight\": \"1000.00\",\r\n  \"chargeableWeightUnit\": \"kgs\",\r\n  \"commodityGroup\": \"Pharaceuticals\",\r\n  \"commodityDescription\": \"vaccines\",\r\n   \"Comments\":\"please handle dangerous goods with care\",\r\n  \"billofEntryNo\": null,\r\n  \"shipmentStatus\": \"Arrived\",\r\n  \"shcCode\": \"EAP\",\r\n  \"shipmentCode\":\"T\",\r\n  \"messageType\":\"FHL\",\r\n   \"shipperDetails\": {\r\n    \"shipperName\": \"DHL Melbourne\",\r\n    \"shipperAddress\": \"Victoria\",\r\n    \"shipperPlace\": \"Melbourne\",\r\n    \"shipperState\": \"Victoria\",\r\n    \"shipperCountryCode\": \"Australia\",\r\n    \"shipperPostalCode\": \"122222\",\r\n    \"shipperContactNo\": \"971676666\"\r\n  },\r\n  \"consigneeDetails\": {\r\n    \"consigneeName\": \"Kuehne + Nagel International AG\",\r\n    \"consigneeAddress\": \"Airport Road\",\r\n    \"consigneePlace\": \"Abu Dhabi\",\r\n    \"consigneeState\": \"Abu Dhabi\",\r\n    \"consigneeCountryCode\": \"UAE\",\r\n    \"consigneePostalCode\": \"122\",\r\n    \"consigneeContactNo\": \"97877878787\"\r\n  },\r\n  \"agentDetails\": {    \r\n    \"agentName\": \"FedEx\",\r\n    \"agentClassCode\": null,\r\n    \"agentPlaceIssue\": null\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Flight Schedule 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Flight Schedules Added/Updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"yesterday\",str1);\r",
											"\r",
											"fNo= Math.floor(100 + Math.random() * 9999)\r",
											"pm.environment.set(\"flightNo\",fNo);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FlightDetails\": [\r\n        {\r\n            \"origin\": \"DEL\",\r\n            \"destination\": \"AUH\",\r\n            \"carrierCode\": \"EY\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"estimatedArrival\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"FlightType\": \"P\",\r\n            \"Routing\": null,\r\n            \"FlightQualifier\": \"A\",\r\n            \"AirCraftType\": \"781\",\r\n            \"ParkingStand\": \"301\",\r\n            \"Gate\": \"70\",\r\n            \"RegistrationNumber\": \"A6BMB\",\r\n            \"CustomsReference\": \"A123\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-schedules",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-schedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Flight Details- Import  1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    //pm.expect(response.data).to.equal(\"Shipment flight detail successfully updated\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"rcvdDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"ShipmentType\": \"Import\",\r\n  \"messageType\": \"FFM\",\r\n  \"receivedDate\": \"{{rcvdDate}}\",\r\n  \"OriginDepartureInfo\": {\r\n    \"FlightNumber\": \"EY{{flightNo}}\",\r\n    \"scheduleDate\": \"{{yesterday}}\",\r\n    \"Airport\": \"DEL\",\r\n    \"AirCarftRegistration\": \"A6EIW\",\r\n    \"FirstPtOfArrival\": null\r\n  },\r\n  \"ManifestDetails\": {\r\n    \"ArrivalInfo\": {\r\n      \"airportCode\": \"AUH\",\r\n      \"ScheduledArrival\": \"{{yesterday}}\"\r\n    },\r\n    \"MAWB\": [\r\n      {\r\n        \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n        \"OriginCode\": \"DEL\",\r\n        \"shipmentCode\": \"T\",\r\n        \"DestinationCode\": \"AUH\",\r\n        \"quantity\": 200,\r\n        \"grossWeight\": 1450,\r\n        \"grossWeightUnit\": \"kgs\",\r\n        \"ULDNumber\": null,\r\n        \"IsBulk\": 1,\r\n        \"TotalQuantity\": 0,\r\n        \"GoodsDescription\": \"WATCH  WATCH BO\"\r\n      }\r\n        \r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-manifest",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-manifest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Pre DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Pre Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment')\r",
											"pm.environment.set(\"doNumber\", moment().format(\"DDMMYYYYHHMMSS\"))\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"Notes\": \"The above pre-arrival information can be used to initiate a Customs entry process through the Customs Portal. Once the cargo has been received, an updated message will be sent, showing the exact pieces and weight received, for this Delivery Order number.\",\r\n  \"NotifyDetails\": null,\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"EMIRATES SPECIALIZED CONTRACTING #{{TestNo}}\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{yesterday}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 200,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 1000.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP,ECC,GEN,GPA,TRB\",\r\n    \"TotalQuantity\": 200,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 1000.0,\r\n    \"TotalGrossWeightUnit\":\"\"    \r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 88,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 888.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 77,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 888.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"MACHINE PARTS\",\r\n    \"HandlingCodes\": \"NSC,SHR,COM,ECP,ECC\"\r\n  },\r\n  \"documentType\": \"PreDO\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate()-1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"IssueDate\",str);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FreightArrivalDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"IssueDate\": \"{{IssueDate}}\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"NotifyDetails\": \"Etihad Airport Services EAS\",\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"PoBox\": \"93971\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"GHQ\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{FlightArrivalDate}}\",\r\n    \"FreightArrivalDate\": \"{{FreightArrivalDate}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 200,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 888.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP\",\r\n    \"TotalQuantity\": 101,\r\n    \"TotalQuantityUnit\":\"pcs\",\r\n    \"TotalGrossWeight\": 101.0,\r\n    \"TotalGrossWeightUnit\":\"kgs\",\r\n    \"ChargeableWeight\": 202.0,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"rcfQuantity\": 199,\r\n    \"rcfWeight\": 202\r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 10,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 100.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 100,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 100.00,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"ChargeableWeight\": 111.00,\r\n    \"rcfQuantity\": 10,\r\n    \"rcfWeight\": 104,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"NatureofGoods\": \"Machine pars such as propellot and turbines which are used for aircrafts.\",\r\n    \"HandlingCodes\": \"\"\r\n  },\r\n  \"documentType\": \"DO\",\r\n  \"ProcessedBy\": \"etihadsupervisor@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add BOE details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWBNO=pm.environment.get(\"addHAWB\");\r",
											"pm.globals.set(\"HAWBNOAppt\",HAWBNO);\r",
											"\r",
											"MAWBNO=pm.environment.get(\"addMAWB\");\r",
											"pm.globals.set(\"MAWBNOAppt\",MAWBNO);\r",
											"\r",
											"FlightNo=pm.environment.get(\"flightNo\");\r",
											"pm.globals.set(\"FlightNoAppt\",FlightNo);\r",
											"\r",
											"FlightDate=pm.environment.get(\"yesterday\");\r",
											"pm.globals.set(\"DateAppt\",FlightDate);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Bill of entry updated successfully\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Bill of entry updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    //pm.expect(response.data).to.equal(null,\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n    \"ShipmentType\": \"Import\",\r\n    \"houseAwbNumber\": \"SFO{{addHAWB}}\",        \r\n    \"billofEntryNo\": \"I/2020/{{addHAWB}}\",\r\n    \"customStatus\": \"RED\"\r\n}\r\n\r\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment/billofentry",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment",
										"billofentry"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Get Timeslots Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp)\r",
											"//current_timestamp.setDate(current_timestamp.getUTCDate() + 1);\r",
											"current_timestamp.setDate(current_timestamp.getDate() + 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 10).replace(\"T\", \" \"))\r",
											"pm.environment.set(\"nextDay\",str);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Timeslots loaded Successfully\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.msg).to.eql(\"Time slots loaded successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify fetched slots are active\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var index = 0; index <= 1; index++) {\r",
											"        pm.expect(jsonData.data[index].active).to.eql(true);     \r",
											"    }  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// set timeslot as environment variable\r",
											"var response = JSON.parse(responseBody);\r",
											"impTS = response.data[2].slotTime\r",
											"impTS = impTS.slice(0, 13)\r",
											"pm.environment.set(\"impTimeSlot\", impTS)\r",
											"impSid=response.data[2].slotCode\r",
											"pm.environment.set(\"impSlotID\", impSid)\r",
											"slotstart=response.data[2].slotStartTime\r",
											"pm.environment.set(\"slotStart\", slotstart)\r",
											"slotend=response.data[2].slotEndTime\r",
											"pm.environment.set(\"slotEnd\", slotend)\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"appointmentDate\": \"{{nextDay}}\",\r\n  \"slotType\": \"Regular\",\r\n  \"vct\": 1,\r\n  \"shipments\": [\r\n    {\r\n      \"mawbNo\": null,\r\n      \"awbNo\": \"AWB-00-001\",\r\n      \"terminalCode\": \"HCT\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    },{\r\n      \"mawbNo\": \"AWB-00-001\",\r\n      \"awbNo\": \"HBL-00-001\",\r\n      \"terminalCode\": \"HCT\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment/import-timeslots",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment",
										"import-timeslots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Create Appointment Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status;\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    status = pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"       \r",
											"});\r",
											"\r",
											"if(status == 500){\r",
											"    pm.test(\"Appointment date is less than current date\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var myvar = jsonData.errorlst[0].error;    \r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Appointment Created Successfully\",function(){\r",
											"    var jsonData = pm.response.json();   \r",
											"    var appNo = jsonData.data.appointmentNo;\r",
											"    pm.test(\"Appointment Number - \"+appNo); \r",
											"    postman.setEnvironmentVariable(\"appointmentNo\", appNo);\r",
											"    postman.setEnvironmentVariable(\"ApptNo\", appNo);\r",
											"    pm.expect(jsonData.msg).to.eql(\"Appointment saved successfully\");\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp.toISOString())\r",
											"current_timestamp.setHours(current_timestamp.getHours() + 2); \r",
											"//console.log(current_timestamp.toISOString())\r",
											"pm.environment.set(\"current_timestamp\", current_timestamp.toISOString());\r",
											"\r",
											"vNo= Math.floor(100000 + Math.random() * 900000)\r",
											"pm.environment.set(\"vehicleNoappt\",vNo);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"appointmentNo\": null,\r\n    \"referenceID\": \"\",\r\n    \"appointmentDate\": \"{{nextDay}}\",\r\n    \"type\": \"imports\",\r\n    \"slotType\": \"Regular\",\r\n    \"slotTime\": \"{{impTimeSlot}}\",\r\n    \"paymentTerm\": \"Direct Checkin(Credit)\",\r\n    \"contactName\": \"Thomas Muller\",\r\n    \"contactEmail\": \"balakumaran.govardha@maqta.ae\",\r\n    \"contactNumber\": \"051468761\",\r\n    \"companyName\":\"{{companyName}}\",\r\n    \"status\": \"Confirmed\",\r\n    \"slotCode\": \"{{impSlotID}}\",\r\n    \"slotStartTime\": \"{{slotStart}}\",\r\n    \"slotEndTime\": \"{{slotEnd}}\",\r\n    \"cargoType\": \"\",\r\n    \"awbDetails\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"b4d574a5-9880-4f2a-9aea-e882ea2328b5\",\r\n            \"awbReferenceNumber\": \"607-{{addMAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 200,\r\n            \"grossWeight\": 1450,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 1000,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"terminalCode\": \"HCT\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": \"EY\",\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04\",\r\n            \"shcCode\": \"EAP,API\",\r\n            \"MawbTerminalCode\": \"HCT\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        },\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"f45e4c87-526c-4eb1-8623-2506abb58951\",\r\n            \"awbReferenceNumber\": \"SFO{{addHAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 10,\r\n            \"grossWeight\": 1000,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 111,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"parentAWBReference\": \"607-{{addMAWB}}\",\r\n            \"terminalCode\": \"HCT\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": null,\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04\",\r\n            \"shcCode\": \"EAP\",\r\n            \"MawbTerminalCode\": \"HCT\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        }\r\n    ],\r\n    \"driverVehicles\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"driverName\": \"Thomas Muller\",\r\n            \"driverContactNo\": \"051468761\",\r\n            \"vehicleNo\": \"{{vehicleNoappt}}\",\r\n            \"vehicleType\": \"3 Ton\",\r\n            \"active\": true,\r\n            \"createdDate\": \"{{yesterday}}\",\r\n            \"createdBy\": \"System\",\r\n            \"checked\": true\r\n        }\r\n    ],\r\n    \"palletPieces\": 0,\r\n    \"nonPalletPieces\": 0,\r\n    \"appointmentDocuments\": [],\r\n    \"appointmentAdditionalServiceDTO\": [],\r\n    \"SpecialHanInstn\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Payment Charges Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status;\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    status = pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"       \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Appointment confirmed Successfully\",function(){\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.msg).to.eql(\"Freight charges payment saved successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-awbcharges",
										"value": "[{\"Key\":\"MAWB\",\"Value\":\"607-{{addMAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":\"T\"},{\"Key\":\"HAWB\",\"Value\":\"SFO{{addHAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":\"T\"},{\"Key\":\"MAWB\",\"Value\":\"607-{{addMAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":null}]",
										"type": "text",
										"disabled": true
									},
									{
										"key": "paymentType",
										"value": "Direct Checkin(Credit)",
										"type": "text",
										"disabled": true
									},
									{
										"key": "refereneceNo",
										"value": "{{appointmentNo}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "appointmentDate",
										"value": "{{nextDay}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "slottime",
										"value": "{{impTimeSlot}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AwbCharges\": [\r\n        {\r\n            \"Key\": \"MAWB\",\r\n            \"Value\": \"607-{{addMAWB}}\",\r\n            \"FlightNumber\": \"EY{{flightNo}}\",\r\n            \"FlightDate\": \"{{yesterday}}\",\r\n            \"ShipmentCode\": \"T\"\r\n        },\r\n        {\r\n            \"Key\": \"HAWB\",\r\n            \"Value\": \"SFO{{addHAWB}}\",\r\n            \"FlightNumber\": \"EY{{flightNo}}\",\r\n            \"FlightDate\": \"{{yesterday}}\",\r\n            \"ShipmentCode\": \"T\"\r\n        }        \r\n    ],\r\n    \"refereneceNo\": \"{{appointmentNo}}\",\r\n    \"appointmentDate\": \"{{nextDay}}\",\r\n    \"SlotTime\": \"{{impTimeSlot}}\",\r\n    \"paymentType\": \"Direct Checkin(Credit)\",    \r\n    \"SlotType\": \"Regular\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Charges/import-shipment/payment-freight-charges",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Charges",
										"import-shipment",
										"payment-freight-charges"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.request.headers.add({ key: 'x-selected-org', value: pm.collectionVariables.get(\"SelectedOrg_DHL\")});",
									"",
									" pm.request.headers.add({key:'x-client-Id',value: 'EB30882C-C83D-468D-9A8A-CB23822203D7' });",
									"",
									"  pm.request.headers.add({key:'x-client-secret',value: 'NLzDQknON4yPgd1EOyeI1h7FyvpAWOLpWFkrtjCN4fITb039OmnlyLUOXwPWlJsn3EHur2HUO3PHRnaRY3vwaw53nOaPd8V3VPuZUHxpI8kPKvJPoQx0DzRIrXYV5aDW5hZnwhYC5cII0fv7IGwLz4iA00TK2upvI7p4cLnLTe4hpJuWpvjkB5N1CwRHmYjflg0x7YH3YhlMlVOIvZtDjvEUfTxsVPX6CnJlNa32lyrDgu7yyJz6syeG5gtZ56Bi' });",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Add Shipments + Create appt- DHL Draft",
					"item": [
						{
							"name": "Imports: Add MAWB Shipment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"MAWB= Math.floor(10000000 + Math.random() * 90000000)\r",
											"pm.environment.set(\"addMAWB\",MAWB);\r",
											"\r",
											"//1- Aramex, 2-DHL, 3-  Agility, 4- Airlink, 5- Rais, 6- ADSO\r",
											"\r",
											"company= 2\r",
											"\r",
											"if (company=== 1) {\r",
											" pm.environment.set(\"companyName\",\"ARAMEX ABU DHABI\"); \r",
											" pm.environment.set(\"companyCode\",\"REG01760\");  \r",
											"}\r",
											"\r",
											"if (company=== 2) {\r",
											"pm.environment.set(\"companyName\",\"DHL GLOBAL FORWARDING\"); \r",
											"pm.environment.set(\"companyCode\",\"ComLSN263110\");  \r",
											"}\r",
											"\r",
											"if (company=== 3) {\r",
											"pm.environment.set(\"companyName\",\"AGILITY LOGISTICS\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA187\"); \r",
											"}\r",
											"\r",
											"if (company=== 4) {\r",
											"pm.environment.set(\"companyName\",\"AIRLINK INTERNATIONAL\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSML04\"); \r",
											"}\r",
											"\r",
											"if (company=== 5) {\r",
											"pm.environment.set(\"companyName\",\"RAIS HASSAN SAADI AND COMPANY LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA22\"); \r",
											"}\r",
											"\r",
											"if (company=== 6) {\r",
											"pm.environment.set(\"companyName\",\"ADSO LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSEXP25703\"); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-selected-org",
										"value": "",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n   \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": null,\r\n  \"airportCode\":\"AUH\",\r\n   \"carrierCode\":\"EY\",\r\n   \"originCode\":\"DEL\",\r\n   \"destinationCode\":\"AUH\",\r\n   \"quantity\":\"200\",\r\n   \"quantityUnit\":\"pcs\",\r\n   \"grossWeight\":\"222\",\r\n   \"grossWeightUnit\":\"kgs\",\r\n   \"chargeableWeight\":\"212\",\r\n   \"chargeableWeightUnit\":\"kgs\",\r\n   \"commodityDescription\":\"API Collections\",\r\n   \"Comments\":\"Dated {{today}}: AS ADDRESSED FLY AS BOOKED CARGO NOTIFY CONSIGNEE UPON ARRIVAL DOCS DOCS  ATTACHED PLEASE HANDLE WITH CARE PLEASE HANDLE WITH  CAREREFRACTORY MATERIAL INV NO 107000181 DT. 23.12.2020 CMT98-88-62X1\",\r\n   \"shcCode\":\"EAP,API\",\r\n   \"shipmentStatus\": \"Arrived\",\r\n   \"shipmentCode\":\"T\",\r\n   \"messageType\":\"FWB\",\r\n   \"shipperDetails\":{\r\n      \"shipperName\":\"FAIR NEW EXPORTS INDIA PVT. LTD.\",\r\n      \"shipperAddress\":\"20 1 SITE IV INDUSTRIAL AREA SAHIBABAD\",\r\n      \"shipperPlace\":\"GHAZIABAD\",\r\n      \"shipperState\":\"UP\",\r\n      \"shipperCountryCode\":\"IN\",\r\n      \"shipperPostalCode\":\"600000\",\r\n      \"shipperContactNo\":\"545452\"\r\n   },\r\n   \"consigneeDetails\":{\r\n      \"consigneeName\":\"AL TAYEB INTERNATIONAL GENERAL TRADING LLC.\",\r\n      \"consigneeAddress\":\"PREMISE NUMBER 416996710 PO BOX NO410780 416 NAD AL HAMAR\",\r\n      \"consigneePlace\":\"DUBAI\",\r\n      \"consigneeState\":\"DUBAI\",\r\n      \"consigneeCountryCode\":\"AE\",\r\n      \"consigneePostalCode\":\"410780\",\r\n      \"consigneeContactNo\":\"654665\"\r\n   },\r\n   \"agentDetails\":{\r\n      \"agentName\":\"{{companyName}}\",\r\n      \"agentClassCode\":\"1431021\",\r\n      \"agentPlaceIssue\":\"NEW DELHI\"\r\n   }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add HAWB Shipments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWB= Math.floor(100000 + Math.random() * 99999)\r",
											"pm.environment.set(\"addHAWB\",HAWB);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Verify the MAWB is created\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    pm.expect(response.data).to.equal(\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": \"SFO{{addHAWB}}\",\r\n  \"airportCode\": \"AUH\",\r\n  \"carrierCode\": \"EY\",\r\n  \"originCode\": \"MLB\",\r\n  \"destinationCode\": \"AUH\",\r\n  \"quantity\": \"10\",\r\n  \"quantityUnit\": \"pcs\",\r\n  \"grossWeight\": \"1000.00\",\r\n  \"grossWeightUnit\": \"kgs\",\r\n  \"chargeableWeight\": \"1000.00\",\r\n  \"chargeableWeightUnit\": \"kgs\",\r\n  \"commodityGroup\": \"Pharaceuticals\",\r\n  \"commodityDescription\": \"vaccines\",\r\n   \"Comments\":\"please handle dangerous goods with care\",\r\n  \"billofEntryNo\": null,\r\n  \"shipmentStatus\": \"Arrived\",\r\n  \"shcCode\": \"EAP\",\r\n  \"shipmentCode\":\"T\",\r\n  \"messageType\":\"FHL\",\r\n   \"shipperDetails\": {\r\n    \"shipperName\": \"DHL Melbourne\",\r\n    \"shipperAddress\": \"Victoria\",\r\n    \"shipperPlace\": \"Melbourne\",\r\n    \"shipperState\": \"Victoria\",\r\n    \"shipperCountryCode\": \"Australia\",\r\n    \"shipperPostalCode\": \"122222\",\r\n    \"shipperContactNo\": \"971676666\"\r\n  },\r\n  \"consigneeDetails\": {\r\n    \"consigneeName\": \"Kuehne + Nagel International AG\",\r\n    \"consigneeAddress\": \"Airport Road\",\r\n    \"consigneePlace\": \"Abu Dhabi\",\r\n    \"consigneeState\": \"Abu Dhabi\",\r\n    \"consigneeCountryCode\": \"UAE\",\r\n    \"consigneePostalCode\": \"122\",\r\n    \"consigneeContactNo\": \"97877878787\"\r\n  },\r\n  \"agentDetails\": {    \r\n    \"agentName\": \"FedEx\",\r\n    \"agentClassCode\": null,\r\n    \"agentPlaceIssue\": null\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Flight Schedule 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Flight Schedules Added/Updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"yesterday\",str1);\r",
											"\r",
											"fNo= Math.floor(100 + Math.random() * 9999)\r",
											"pm.environment.set(\"flightNo\",fNo);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FlightDetails\": [\r\n        {\r\n            \"origin\": \"DEL\",\r\n            \"destination\": \"AUH\",\r\n            \"carrierCode\": \"EY\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"estimatedArrival\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"FlightType\": \"P\",\r\n            \"Routing\": null,\r\n            \"FlightQualifier\": \"A\",\r\n            \"AirCraftType\": \"781\",\r\n            \"ParkingStand\": \"301\",\r\n            \"Gate\": \"70\",\r\n            \"RegistrationNumber\": \"A6BMB\",\r\n            \"CustomsReference\": \"A123\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-schedules",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-schedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Flight Details- Import  1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    //pm.expect(response.data).to.equal(\"Shipment flight detail successfully updated\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"rcvdDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"ShipmentType\": \"Import\",\r\n  \"messageType\": \"FFM\",\r\n  \"receivedDate\": \"{{rcvdDate}}\",\r\n  \"OriginDepartureInfo\": {\r\n    \"FlightNumber\": \"EY{{flightNo}}\",\r\n    \"scheduleDate\": \"{{yesterday}}\",\r\n    \"Airport\": \"DEL\",\r\n    \"AirCarftRegistration\": \"A6EIW\",\r\n    \"FirstPtOfArrival\": null\r\n  },\r\n  \"ManifestDetails\": {\r\n    \"ArrivalInfo\": {\r\n      \"airportCode\": \"AUH\",\r\n      \"ScheduledArrival\": \"{{yesterday}}\"\r\n    },\r\n    \"MAWB\": [\r\n      {\r\n        \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n        \"OriginCode\": \"DEL\",\r\n        \"shipmentCode\": \"T\",\r\n        \"DestinationCode\": \"AUH\",\r\n        \"quantity\": 200,\r\n        \"grossWeight\": 1450,\r\n        \"grossWeightUnit\": \"kgs\",\r\n        \"ULDNumber\": null,\r\n        \"IsBulk\": 1,\r\n        \"TotalQuantity\": 0,\r\n        \"GoodsDescription\": \"WATCH  WATCH BO\"\r\n      }\r\n        \r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-manifest",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-manifest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Pre DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Pre Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment')\r",
											"pm.environment.set(\"doNumber\", moment().format(\"DDMMYYYYHHMMSS\"))\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"Notes\": \"The above pre-arrival information can be used to initiate a Customs entry process through the Customs Portal. Once the cargo has been received, an updated message will be sent, showing the exact pieces and weight received, for this Delivery Order number.\",\r\n  \"NotifyDetails\": null,\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"EMIRATES SPECIALIZED CONTRACTING #{{TestNo}}\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{yesterday}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 200,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 1000.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP,ECC,GEN,GPA,TRB\",\r\n    \"TotalQuantity\": 200,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 1000.0,\r\n    \"TotalGrossWeightUnit\":\"\"    \r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 88,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 888.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 77,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 888.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"MACHINE PARTS\",\r\n    \"HandlingCodes\": \"NSC,SHR,COM,ECP,ECC\"\r\n  },\r\n  \"documentType\": \"PreDO\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate()-1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"IssueDate\",str);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FreightArrivalDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"IssueDate\": \"{{IssueDate}}\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"NotifyDetails\": \"Etihad Airport Services EAS\",\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"PoBox\": \"93971\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"GHQ\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{FlightArrivalDate}}\",\r\n    \"FreightArrivalDate\": \"{{FreightArrivalDate}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 200,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 888.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP\",\r\n    \"TotalQuantity\": 101,\r\n    \"TotalQuantityUnit\":\"pcs\",\r\n    \"TotalGrossWeight\": 101.0,\r\n    \"TotalGrossWeightUnit\":\"kgs\",\r\n    \"ChargeableWeight\": 202.0,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"rcfQuantity\": 199,\r\n    \"rcfWeight\": 202\r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 10,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 100.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 100,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 100.00,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"ChargeableWeight\": 111.00,\r\n    \"rcfQuantity\": 10,\r\n    \"rcfWeight\": 104,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"NatureofGoods\": \"Machine pars such as propellot and turbines which are used for aircrafts.\",\r\n    \"HandlingCodes\": \"\"\r\n  },\r\n  \"documentType\": \"DO\",\r\n  \"ProcessedBy\": \"etihadsupervisor@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add BOE details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWBNO=pm.environment.get(\"addHAWB\");\r",
											"pm.globals.set(\"HAWBNOAppt\",HAWBNO);\r",
											"\r",
											"MAWBNO=pm.environment.get(\"addMAWB\");\r",
											"pm.globals.set(\"MAWBNOAppt\",MAWBNO);\r",
											"\r",
											"FlightNo=pm.environment.get(\"flightNo\");\r",
											"pm.globals.set(\"FlightNoAppt\",FlightNo);\r",
											"\r",
											"FlightDate=pm.environment.get(\"yesterday\");\r",
											"pm.globals.set(\"DateAppt\",FlightDate);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Bill of entry updated successfully\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Bill of entry updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    //pm.expect(response.data).to.equal(null,\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n    \"ShipmentType\": \"Import\",\r\n    \"houseAwbNumber\": \"SFO{{addHAWB}}\",        \r\n    \"billofEntryNo\": \"I/2020/{{addHAWB}}\",\r\n    \"customStatus\": \"RED\"\r\n}\r\n\r\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment/billofentry",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment",
										"billofentry"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Get Timeslots Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp)\r",
											"//current_timestamp.setDate(current_timestamp.getUTCDate() + 1);\r",
											"current_timestamp.setDate(current_timestamp.getDate() + 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 10).replace(\"T\", \" \"))\r",
											"pm.environment.set(\"nextDay\",str);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Timeslots loaded Successfully\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.msg).to.eql(\"Time slots loaded successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify fetched slots are active\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var index = 0; index <= 1; index++) {\r",
											"        pm.expect(jsonData.data[index].active).to.eql(true);     \r",
											"    }  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// set timeslot as environment variable\r",
											"var response = JSON.parse(responseBody);\r",
											"impTS = response.data[2].slotTime\r",
											"impTS = impTS.slice(0, 13)\r",
											"pm.environment.set(\"impTimeSlot\", impTS)\r",
											"impSid=response.data[2].slotCode\r",
											"pm.environment.set(\"impSlotID\", impSid)\r",
											"slotstart=response.data[2].slotStartTime\r",
											"pm.environment.set(\"slotStart\", slotstart)\r",
											"slotend=response.data[2].slotEndTime\r",
											"pm.environment.set(\"slotEnd\", slotend)\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"appointmentDate\": \"{{nextDay}}\",\r\n  \"slotType\": \"Regular\",\r\n  \"vct\": 1,\r\n  \"shipments\": [\r\n    {\r\n      \"mawbNo\": null,\r\n      \"awbNo\": \"AWB-00-001\",\r\n      \"terminalCode\": \"HCT\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    },{\r\n      \"mawbNo\": \"AWB-00-001\",\r\n      \"awbNo\": \"HBL-00-001\",\r\n      \"terminalCode\": \"HCT\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment/import-timeslots",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment",
										"import-timeslots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Create Appointment Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status;\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    status = pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"       \r",
											"});\r",
											"\r",
											"if(status == 500){\r",
											"    pm.test(\"Appointment date is less than current date\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var myvar = jsonData.errorlst[0].error;    \r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Appointment Created Successfully\",function(){\r",
											"    var jsonData = pm.response.json();   \r",
											"    var appNo = jsonData.data.appointmentNo;\r",
											"    pm.test(\"Appointment Number - \"+appNo); \r",
											"    postman.setEnvironmentVariable(\"appointmentNo\", appNo);\r",
											"    postman.setEnvironmentVariable(\"ApptNo\", appNo);\r",
											"    pm.expect(jsonData.msg).to.eql(\"Appointment saved successfully\");\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp.toISOString())\r",
											"current_timestamp.setHours(current_timestamp.getHours() + 2); \r",
											"//console.log(current_timestamp.toISOString())\r",
											"pm.environment.set(\"current_timestamp\", current_timestamp.toISOString());\r",
											"\r",
											"vNo= Math.floor(100000 + Math.random() * 900000)\r",
											"pm.environment.set(\"vehicleNoappt\",vNo);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"appointmentNo\": null,\r\n    \"referenceID\": \"\",\r\n    \"appointmentDate\": \"{{nextDay}}\",\r\n    \"type\": \"imports\",\r\n    \"slotType\": \"Regular\",\r\n    \"slotTime\": \"{{impTimeSlot}}\",\r\n    \"paymentTerm\": \"Direct Checkin(Credit)\",\r\n    \"contactName\": \"Thomas Muller\",\r\n    \"contactEmail\": \"balakumaran.govardha@maqta.ae\",\r\n    \"contactNumber\": \"051468761\",\r\n    \"companyName\":\"{{companyName}}\",\r\n    \"status\": \"Confirmed\",\r\n    \"slotCode\": \"{{impSlotID}}\",\r\n    \"slotStartTime\": \"{{slotStart}}\",\r\n    \"slotEndTime\": \"{{slotEnd}}\",\r\n    \"cargoType\": \"\",\r\n    \"awbDetails\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"b4d574a5-9880-4f2a-9aea-e882ea2328b5\",\r\n            \"awbReferenceNumber\": \"607-{{addMAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 200,\r\n            \"grossWeight\": 1450,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 1000,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"terminalCode\": \"HCT\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": \"EY\",\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04\",\r\n            \"shcCode\": \"EAP,API\",\r\n            \"MawbTerminalCode\": \"HCT\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        },\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"f45e4c87-526c-4eb1-8623-2506abb58951\",\r\n            \"awbReferenceNumber\": \"SFO{{addHAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 10,\r\n            \"grossWeight\": 1000,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 111,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"parentAWBReference\": \"607-{{addMAWB}}\",\r\n            \"terminalCode\": \"HCT\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": null,\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04\",\r\n            \"shcCode\": \"EAP\",\r\n            \"MawbTerminalCode\": \"HCT\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        }\r\n    ],\r\n    \"driverVehicles\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"driverName\": \"Thomas Muller\",\r\n            \"driverContactNo\": \"051468761\",\r\n            \"vehicleNo\": \"{{vehicleNoappt}}\",\r\n            \"vehicleType\": \"3 Ton\",\r\n            \"active\": true,\r\n            \"createdDate\": \"{{yesterday}}\",\r\n            \"createdBy\": \"System\",\r\n            \"checked\": true\r\n        }\r\n    ],\r\n    \"palletPieces\": 0,\r\n    \"nonPalletPieces\": 0,\r\n    \"appointmentDocuments\": [],\r\n    \"appointmentAdditionalServiceDTO\": [],\r\n    \"SpecialHanInstn\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.request.headers.add({ key: 'x-selected-org', value: pm.collectionVariables.get(\"SelectedOrg_DHL\")});",
									"",
									" pm.request.headers.add({key:'x-client-Id',value: 'EB30882C-C83D-468D-9A8A-CB23822203D7' });",
									"",
									"  pm.request.headers.add({key:'x-client-secret',value: 'NLzDQknON4yPgd1EOyeI1h7FyvpAWOLpWFkrtjCN4fITb039OmnlyLUOXwPWlJsn3EHur2HUO3PHRnaRY3vwaw53nOaPd8V3VPuZUHxpI8kPKvJPoQx0DzRIrXYV5aDW5hZnwhYC5cII0fv7IGwLz4iA00TK2upvI7p4cLnLTe4hpJuWpvjkB5N1CwRHmYjflg0x7YH3YhlMlVOIvZtDjvEUfTxsVPX6CnJlNa32lyrDgu7yyJz6syeG5gtZ56Bi' });",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Add Shipments + Create appt- Agility Used",
					"item": [
						{
							"name": "Imports: Add MAWB Shipment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"MAWB= Math.floor(10000000 + Math.random() * 90000000)\r",
											"pm.environment.set(\"addMAWB\",MAWB);\r",
											"\r",
											"//1- Aramex, 2-DHL, 3-  Agility, 4- Airlink, 5- Rais, 6- ADSO\r",
											"\r",
											"company= 3\r",
											"\r",
											"if (company=== 1) {\r",
											" pm.environment.set(\"companyName\",\"ARAMEX ABU DHABI\"); \r",
											" pm.environment.set(\"companyCode\",\"REG01760\");  \r",
											"}\r",
											"\r",
											"if (company=== 2) {\r",
											"pm.environment.set(\"companyName\",\"DHL GLOBAL FORWARDING\"); \r",
											"pm.environment.set(\"companyCode\",\"ComLSN263110\");  \r",
											"}\r",
											"\r",
											"if (company=== 3) {\r",
											"pm.environment.set(\"companyName\",\"AGILITY LOGISTICS\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA187\"); \r",
											"}\r",
											"\r",
											"if (company=== 4) {\r",
											"pm.environment.set(\"companyName\",\"AIRLINK INTERNATIONAL\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSML04\"); \r",
											"}\r",
											"\r",
											"if (company=== 5) {\r",
											"pm.environment.set(\"companyName\",\"RAIS HASSAN SAADI AND COMPANY LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA22\"); \r",
											"}\r",
											"\r",
											"if (company=== 6) {\r",
											"pm.environment.set(\"companyName\",\"ADSO LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSEXP25703\"); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-selected-org",
										"value": "",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n   \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": null,\r\n  \"airportCode\":\"AUH\",\r\n   \"carrierCode\":\"EY\",\r\n   \"originCode\":\"DEL\",\r\n   \"destinationCode\":\"AUH\",\r\n   \"quantity\":\"10\",\r\n   \"quantityUnit\":\"pcs\",\r\n   \"grossWeight\":\"111\",\r\n   \"grossWeightUnit\":\"kgs\",\r\n   \"chargeableWeight\":\"111\",\r\n   \"chargeableWeightUnit\":\"kgs\",\r\n   \"commodityDescription\":\"API Collections\",\r\n   \"Comments\":\"Dated {{today}}: AS ADDRESSED FLY AS BOOKED CARGO NOTIFY CONSIGNEE UPON ARRIVAL DOCS DOCS  ATTACHED PLEASE HANDLE WITH CARE PLEASE HANDLE WITH  CAREREFRACTORY MATERIAL INV NO 107000181 DT. 23.12.2020 CMT98-88-62X1\",\r\n   \"shcCode\":\"EAP,HEA\",\r\n   \"shipmentStatus\": \"Arrived\",\r\n   \"shipmentCode\":\"T\",\r\n   \"messageType\":\"FWB\",\r\n   \"shipperDetails\":{\r\n      \"shipperName\":\"FAIR NEW EXPORTS INDIA PVT. LTD.\",\r\n      \"shipperAddress\":\"20 1 SITE IV INDUSTRIAL AREA SAHIBABAD\",\r\n      \"shipperPlace\":\"GHAZIABAD\",\r\n      \"shipperState\":\"UP\",\r\n      \"shipperCountryCode\":\"IN\",\r\n      \"shipperPostalCode\":\"600000\",\r\n      \"shipperContactNo\":\"545452\"\r\n   },\r\n   \"consigneeDetails\":{\r\n      \"consigneeName\":\"AL TAYEB INTERNATIONAL GENERAL TRADING LLC.\",\r\n      \"consigneeAddress\":\"PREMISE NUMBER 416996710 PO BOX NO410780 416 NAD AL HAMAR\",\r\n      \"consigneePlace\":\"DUBAI\",\r\n      \"consigneeState\":\"DUBAI\",\r\n      \"consigneeCountryCode\":\"AE\",\r\n      \"consigneePostalCode\":\"410780\",\r\n      \"consigneeContactNo\":\"654665\"\r\n   },\r\n   \"agentDetails\":{\r\n      \"agentName\":\"{{companyName}}\",\r\n      \"agentClassCode\":\"1431021\",\r\n      \"agentPlaceIssue\":\"NEW DELHI\"\r\n   }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add HAWB Shipments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWB= Math.floor(100000 + Math.random() * 99999)\r",
											"pm.environment.set(\"addHAWB\",HAWB);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Verify the MAWB is created\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    pm.expect(response.data).to.equal(\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": \"SFO{{addHAWB}}\",\r\n  \"airportCode\": \"AUH\",\r\n  \"carrierCode\": \"EY\",\r\n  \"originCode\": \"MLB\",\r\n  \"destinationCode\": \"AUH\",\r\n  \"quantity\": \"10\",\r\n  \"quantityUnit\": \"pcs\",\r\n  \"grossWeight\": \"100.00\",\r\n  \"grossWeightUnit\": \"kgs\",\r\n  \"chargeableWeight\": \"100.00\",\r\n  \"chargeableWeightUnit\": \"kgs\",\r\n  \"commodityGroup\": \"Pharaceuticals\",\r\n  \"commodityDescription\": \"vaccines\",\r\n   \"Comments\":\"please handle dangerous goods with care\",\r\n  \"billofEntryNo\": null,\r\n  \"shipmentStatus\": \"Arrived\",\r\n  \"shcCode\": \"EAP\",\r\n  \"shipmentCode\":\"T\",\r\n  \"messageType\":\"FHL\",\r\n   \"shipperDetails\": {\r\n    \"shipperName\": \"DHL Melbourne\",\r\n    \"shipperAddress\": \"Victoria\",\r\n    \"shipperPlace\": \"Melbourne\",\r\n    \"shipperState\": \"Victoria\",\r\n    \"shipperCountryCode\": \"Australia\",\r\n    \"shipperPostalCode\": \"122222\",\r\n    \"shipperContactNo\": \"971676666\"\r\n  },\r\n  \"consigneeDetails\": {\r\n    \"consigneeName\": \"Kuehne + Nagel International AG\",\r\n    \"consigneeAddress\": \"Airport Road\",\r\n    \"consigneePlace\": \"Abu Dhabi\",\r\n    \"consigneeState\": \"Abu Dhabi\",\r\n    \"consigneeCountryCode\": \"UAE\",\r\n    \"consigneePostalCode\": \"122\",\r\n    \"consigneeContactNo\": \"97877878787\"\r\n  },\r\n  \"agentDetails\": {    \r\n    \"agentName\": \"FedEx\",\r\n    \"agentClassCode\": null,\r\n    \"agentPlaceIssue\": null\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Flight Schedule 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Flight Schedules Added/Updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"yesterday\",str1);\r",
											"\r",
											"fNo= Math.floor(100 + Math.random() * 9999)\r",
											"pm.environment.set(\"flightNo\",fNo);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FlightDetails\": [\r\n        {\r\n            \"origin\": \"DEL\",\r\n            \"destination\": \"AUH\",\r\n            \"carrierCode\": \"EY\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"estimatedArrival\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"FlightType\": \"P\",\r\n            \"Routing\": null,\r\n            \"FlightQualifier\": \"A\",\r\n            \"AirCraftType\": \"781\",\r\n            \"ParkingStand\": \"301\",\r\n            \"Gate\": \"70\",\r\n            \"RegistrationNumber\": \"A6BMB\",\r\n            \"CustomsReference\": \"A123\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-schedules",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-schedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Flight Details- Import  1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    //pm.expect(response.data).to.equal(\"Shipment flight detail successfully updated\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"rcvdDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"ShipmentType\": \"Import\",\r\n  \"messageType\": \"FFM\",\r\n  \"receivedDate\": \"{{rcvdDate}}\",\r\n  \"OriginDepartureInfo\": {\r\n    \"FlightNumber\": \"EY{{flightNo}}\",\r\n    \"scheduleDate\": \"{{yesterday}}\",\r\n    \"Airport\": \"DEL\",\r\n    \"AirCarftRegistration\": \"A6EIW\",\r\n    \"FirstPtOfArrival\": null\r\n  },\r\n  \"ManifestDetails\": {\r\n    \"ArrivalInfo\": {\r\n      \"airportCode\": \"AUH\",\r\n      \"ScheduledArrival\": \"{{yesterday}}\"\r\n    },\r\n    \"MAWB\": [\r\n      {\r\n        \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n        \"OriginCode\": \"DEL\",\r\n        \"shipmentCode\": \"T\",\r\n        \"DestinationCode\": \"AUH\",\r\n        \"quantity\": 200,\r\n        \"grossWeight\": 1450,\r\n        \"grossWeightUnit\": \"kgs\",\r\n        \"ULDNumber\": null,\r\n        \"IsBulk\": 1,\r\n        \"TotalQuantity\": 0,\r\n        \"GoodsDescription\": \"WATCH  WATCH BO\"\r\n      }\r\n        \r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-manifest",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-manifest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Pre DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Pre Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment')\r",
											"pm.environment.set(\"doNumber\", moment().format(\"DDMMYYYYHHMMSS\"))\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"Notes\": \"The above pre-arrival information can be used to initiate a Customs entry process through the Customs Portal. Once the cargo has been received, an updated message will be sent, showing the exact pieces and weight received, for this Delivery Order number.\",\r\n  \"NotifyDetails\": null,\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"EMIRATES SPECIALIZED CONTRACTING #{{TestNo}}\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{yesterday}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 200,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 1000.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP,ECC,GEN,GPA,TRB\",\r\n    \"TotalQuantity\": 200,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 1000.0,\r\n    \"TotalGrossWeightUnit\":\"\"    \r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 88,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 888.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 77,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 888.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"MACHINE PARTS\",\r\n    \"HandlingCodes\": \"NSC,SHR,COM,ECP,ECC\"\r\n  },\r\n  \"documentType\": \"PreDO\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate()-1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"IssueDate\",str);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FreightArrivalDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"IssueDate\": \"{{IssueDate}}\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"NotifyDetails\": \"Etihad Airport Services EAS\",\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"PoBox\": \"93971\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"New Mahe\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{FlightArrivalDate}}\",\r\n    \"FreightArrivalDate\": \"{{FreightArrivalDate}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 10,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 111.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP\",\r\n    \"TotalQuantity\": 101,\r\n    \"TotalQuantityUnit\":\"pcs\",\r\n    \"TotalGrossWeight\": 101.0,\r\n    \"TotalGrossWeightUnit\":\"kgs\",\r\n    \"ChargeableWeight\": 202.0,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"rcfQuantity\": 10,\r\n    \"rcfWeight\": 111\r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 10,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 100.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 100,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 100.00,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"ChargeableWeight\": 111.00,\r\n    \"rcfQuantity\": 10,\r\n    \"rcfWeight\": 104,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"NatureofGoods\": \"Machine pars such as propellot and turbines which are used for aircrafts.\",\r\n    \"HandlingCodes\": \"\"\r\n  },\r\n  \"documentType\": \"DO\",\r\n  \"ProcessedBy\": \"etihadsupervisor@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add BOE details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWBNO=pm.environment.get(\"addHAWB\");\r",
											"pm.globals.set(\"HAWBNOAppt\",HAWBNO);\r",
											"\r",
											"MAWBNO=pm.environment.get(\"addMAWB\");\r",
											"pm.globals.set(\"MAWBNOAppt\",MAWBNO);\r",
											"\r",
											"FlightNo=pm.environment.get(\"flightNo\");\r",
											"pm.globals.set(\"FlightNoAppt\",FlightNo);\r",
											"\r",
											"FlightDate=pm.environment.get(\"yesterday\");\r",
											"pm.globals.set(\"DateAppt\",FlightDate);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Bill of entry updated successfully\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Bill of entry updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    //pm.expect(response.data).to.equal(null,\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n    \"ShipmentType\": \"Import\",\r\n    \"houseAwbNumber\": \"SFO{{addHAWB}}\",        \r\n    \"billofEntryNo\": \"I/2020/{{addHAWB}}\",\r\n    \"customStatus\": \"RED\"\r\n}\r\n\r\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment/billofentry",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment",
										"billofentry"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Get Timeslots Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp)\r",
											"//current_timestamp.setDate(current_timestamp.getUTCDate() + 1);\r",
											"current_timestamp.setDate(current_timestamp.getDate() + 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 10).replace(\"T\", \" \"))\r",
											"pm.environment.set(\"nextDay\",str);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Timeslots loaded Successfully\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.msg).to.eql(\"Time slots loaded successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify fetched slots are active\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var index = 0; index <= 1; index++) {\r",
											"        pm.expect(jsonData.data[index].active).to.eql(true);     \r",
											"    }  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// set timeslot as environment variable\r",
											"var response = JSON.parse(responseBody);\r",
											"impTS = response.data[2].slotTime\r",
											"impTS = impTS.slice(0, 13)\r",
											"pm.environment.set(\"impTimeSlot\", impTS)\r",
											"impSid=response.data[2].slotCode\r",
											"pm.environment.set(\"impSlotID\", impSid)\r",
											"slotstart=response.data[2].slotStartTime\r",
											"pm.environment.set(\"slotStart\", slotstart)\r",
											"slotend=response.data[2].slotEndTime\r",
											"pm.environment.set(\"slotEnd\", slotend)\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"appointmentDate\": \"{{nextDay}}\",\r\n  \"slotType\": \"Regular\",\r\n  \"vct\": 1,\r\n  \"shipments\": [\r\n    {\r\n      \"mawbNo\": null,\r\n      \"awbNo\": \"AWB-00-001\",\r\n      \"terminalCode\": \"HCT\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    },{\r\n      \"mawbNo\": \"AWB-00-001\",\r\n      \"awbNo\": \"HBL-00-001\",\r\n      \"terminalCode\": \"HCT\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment/import-timeslots",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment",
										"import-timeslots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Create Appointment Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status;\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    status = pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"       \r",
											"});\r",
											"\r",
											"if(status == 500){\r",
											"    pm.test(\"Appointment date is less than current date\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var myvar = jsonData.errorlst[0].error;    \r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Appointment Created Successfully\",function(){\r",
											"    var jsonData = pm.response.json();   \r",
											"    var appNo = jsonData.data.appointmentNo;\r",
											"    pm.test(\"Appointment Number - \"+appNo); \r",
											"    postman.setEnvironmentVariable(\"appointmentNo\", appNo);\r",
											"    postman.setEnvironmentVariable(\"ApptNo\", appNo);\r",
											"    pm.expect(jsonData.msg).to.eql(\"Appointment saved successfully\");\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp.toISOString())\r",
											"current_timestamp.setHours(current_timestamp.getHours() + 2); \r",
											"//console.log(current_timestamp.toISOString())\r",
											"pm.environment.set(\"current_timestamp\", current_timestamp.toISOString());\r",
											"\r",
											"vNo= Math.floor(100000 + Math.random() * 900000)\r",
											"pm.environment.set(\"vehicleNoappt\",vNo);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"appointmentNo\": null,\r\n    \"referenceID\": \"\",\r\n    \"appointmentDate\": \"{{nextDay}}\",\r\n    \"type\": \"imports\",\r\n    \"slotType\": \"Regular\",\r\n    \"slotTime\": \"{{impTimeSlot}}\",\r\n    \"paymentTerm\": \"Direct Checkin(Credit)\",\r\n    \"contactName\": \"Thomas Muller\",\r\n    \"contactEmail\": \"balakumaran.govardha@maqta.ae\",\r\n    \"contactNumber\": \"051468761\",\r\n    \"companyName\":\"AGILITY LOGISTICS\",\r\n    \"status\": \"Confirmed\",\r\n    \"slotCode\": \"{{impSlotID}}\",\r\n    \"slotStartTime\": \"{{slotStart}}\",\r\n    \"slotEndTime\": \"{{slotEnd}}\",\r\n    \"cargoType\": \"\",\r\n    \"awbDetails\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"b4d574a5-9880-4f2a-9aea-e882ea2328b5\",\r\n            \"awbReferenceNumber\": \"607-{{addMAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 200,\r\n            \"grossWeight\": 1450,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 1000,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"terminalCode\": \"HCT\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": \"EY\",\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04\",\r\n            \"shcCode\": \"EAP,API\",\r\n            \"MawbTerminalCode\": \"HCT\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        },\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"f45e4c87-526c-4eb1-8623-2506abb58951\",\r\n            \"awbReferenceNumber\": \"SFO{{addHAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 10,\r\n            \"grossWeight\": 1000,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 111,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"parentAWBReference\": \"607-{{addMAWB}}\",\r\n            \"terminalCode\": \"HCT\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": null,\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04\",\r\n            \"shcCode\": \"EAP\",\r\n            \"MawbTerminalCode\": \"HCT\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        }\r\n    ],\r\n    \"driverVehicles\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"driverName\": \"Thomas Muller\",\r\n            \"driverContactNo\": \"051468761\",\r\n            \"vehicleNo\": \"{{vehicleNoappt}}\",\r\n            \"vehicleType\": \"3 Ton\",\r\n            \"active\": true,\r\n            \"createdDate\": \"{{yesterday}}\",\r\n            \"createdBy\": \"System\",\r\n            \"checked\": true\r\n        }\r\n    ],\r\n    \"palletPieces\": 0,\r\n    \"nonPalletPieces\": 0,\r\n    \"appointmentDocuments\": [],\r\n    \"appointmentAdditionalServiceDTO\": [],\r\n    \"SpecialHanInstn\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Payment Charges Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status;\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    status = pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"       \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Appointment confirmed Successfully\",function(){\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.msg).to.eql(\"Freight charges payment saved successfully\");\r",
											"});\r",
											"\r",
											"setTimeout(function(){}, [25000]);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-awbcharges",
										"value": "[{\"Key\":\"MAWB\",\"Value\":\"607-{{addMAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":\"T\"},{\"Key\":\"HAWB\",\"Value\":\"SFO{{addHAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":\"T\"},{\"Key\":\"MAWB\",\"Value\":\"607-{{addMAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":null}]",
										"type": "text",
										"disabled": true
									},
									{
										"key": "paymentType",
										"value": "Direct Checkin(Credit)",
										"type": "text",
										"disabled": true
									},
									{
										"key": "refereneceNo",
										"value": "{{appointmentNo}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "appointmentDate",
										"value": "{{nextDay}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "slottime",
										"value": "{{impTimeSlot}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AwbCharges\": [\r\n        {\r\n            \"Key\": \"MAWB\",\r\n            \"Value\": \"607-{{addMAWB}}\",\r\n            \"FlightNumber\": \"EY{{flightNo}}\",\r\n            \"FlightDate\": \"{{yesterday}}\",\r\n            \"ShipmentCode\": \"T\"\r\n        },\r\n        {\r\n            \"Key\": \"HAWB\",\r\n            \"Value\": \"SFO{{addHAWB}}\",\r\n            \"FlightNumber\": \"EY{{flightNo}}\",\r\n            \"FlightDate\": \"{{yesterday}}\",\r\n            \"ShipmentCode\": \"T\"\r\n        }        \r\n    ],\r\n    \"refereneceNo\": \"{{appointmentNo}}\",\r\n    \"appointmentDate\": \"{{nextDay}}\",\r\n    \"SlotTime\": \"{{impTimeSlot}}\",\r\n    \"paymentType\": \"Direct Checkin(Credit)\",    \r\n    \"SlotType\": \"Regular\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Charges/import-shipment/payment-freight-charges",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Charges",
										"import-shipment",
										"payment-freight-charges"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: NEW DLV Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// //1- Aramex, 2-DHL, 3-  Agility, 4- Airlink, 5- Rais, 6- ADSO 7-Micco 8- Rajab 9-Globe 10- Majid 11-LQ\r",
											"// //GL- Direct , Majid- Partial Credit\r",
											"\r",
											"// company= 3\r",
											"\r",
											"// if (company=== 1) {\r",
											"//  pm.environment.set(\"companyName\",\"ARAMEX ABU DHABI\"); \r",
											"//  pm.environment.set(\"companyCode\",\"REG01760\");  \r",
											"// }\r",
											"\r",
											"// if (company=== 2) {\r",
											"// pm.environment.set(\"companyName\",\"DHL GLOBAL FORWARDING\"); \r",
											"// pm.environment.set(\"companyCode\",\"ComLSN263110\");  \r",
											"// }\r",
											"\r",
											"// if (company=== 3) {\r",
											"// pm.environment.set(\"companyName\",\"AGILITY LOGISTICS\"); \r",
											"// pm.environment.set(\"companyCode\",\"PCSA187\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 4) {\r",
											"// pm.environment.set(\"companyName\",\"AIRLINK INTERNATIONAL\"); \r",
											"// pm.environment.set(\"companyCode\",\"PCSML04\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 5) {\r",
											"// pm.environment.set(\"companyName\",\"RAIS HASSAN SAADI AND COMPANY LLC\"); \r",
											"// pm.environment.set(\"companyCode\",\"PCSA22\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 6) {\r",
											"// pm.environment.set(\"companyName\",\"ADSO LLC\"); \r",
											"// pm.environment.set(\"companyCode\",\"PCSEXP25703\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 7) {\r",
											"// pm.environment.set(\"companyName\",\"Micco Logistics\"); \r",
											"// pm.environment.set(\"companyCode\",\"PCSEXP5467\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 8) {\r",
											"// pm.environment.set(\"companyName\",\"RAJAB CARGO SERVICES EST.\"); \r",
											"// pm.environment.set(\"companyCode\",\"REG01657\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 9) {\r",
											"// pm.environment.set(\"companyName\",\"GLOBELINK WEST STAR SHIPPING LLC\"); \r",
											"// pm.environment.set(\"companyCode\",\"ComLSN651250\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 10) {\r",
											"// pm.environment.set(\"companyName\",\"AL MAJID SHIPPING SERVICES\"); \r",
											"// pm.environment.set(\"companyCode\",\"PCSA241\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 11) {\r",
											"// pm.environment.set(\"companyName\",\"Logiquest Logistics L.L.C.\"); \r",
											"// pm.environment.set(\"companyCode\",\"PCSEXP19\"); \r",
											"// }\r",
											"\r",
											"\r",
											"// var current_timestamp = new Date();\r",
											"// current_timestamp.setDate(current_timestamp.getDate());\r",
											"// currTime = (current_timestamp.toISOString())\r",
											"// //console.log(\"Current Time is\" + currTime)\r",
											"// const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"// pm.environment.set(\"today\",str2);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mawbNumber\": \"607-{{addMAWB}}\",\r\n    \"hawbNumber\": \"SFO{{addHAWB}}\",\r\n    \"flightNo\": \"EY{{flightNo}}\",\r\n    \"flightDate\": \"{{yesterday}}\",\r\n    \"origin\": \"DEL\",\r\n    \"destination\": \"AUH\",\r\n    \"type\": \"T\",\r\n    \"pieces\": 10,\r\n    \"shCs\": \"EAP\",\r\n    \"agent\": \"{{companyName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/update-dlv-for-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"update-dlv-for-shipment"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.request.headers.add({ key: 'x-selected-org', value: pm.collectionVariables.get(\"Selected_OrgFF\")});",
									"",
									" pm.request.headers.add({key:'x-client-Id',value: 'EB30882C-C83D-468D-9A8A-CB23822203D7' });",
									"",
									"  pm.request.headers.add({key:'x-client-secret',value: 'NLzDQknON4yPgd1EOyeI1h7FyvpAWOLpWFkrtjCN4fITb039OmnlyLUOXwPWlJsn3EHur2HUO3PHRnaRY3vwaw53nOaPd8V3VPuZUHxpI8kPKvJPoQx0DzRIrXYV5aDW5hZnwhYC5cII0fv7IGwLz4iA00TK2upvI7p4cLnLTe4hpJuWpvjkB5N1CwRHmYjflg0x7YH3YhlMlVOIvZtDjvEUfTxsVPX6CnJlNa32lyrDgu7yyJz6syeG5gtZ56Bi' });",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "GHQ",
			"item": [
				{
					"name": "Add Shipments + Create appt- Agility",
					"item": [
						{
							"name": "Import Consignee Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the configuration updated successfully \",function (){\r",
											"    pm.expect(response.data).to.equal(\"Configuration updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{EASToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"config_Key\": \"HCT_Consignees\",\r\n  \"config_Value\": \"JManuels\",\r\n  \"description\": \"GHQ Consignees addition\",\r\n  \"is_Active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Configuration/edit-configuration",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Configuration",
										"edit-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add MAWB Shipment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"MAWB= Math.floor(10000000 + Math.random() * 90000000)\r",
											"pm.environment.set(\"addMAWB\",MAWB);\r",
											"\r",
											"//1- Aramex, 2-DHL, 3-  Agility, 4- Airlink, 5- Rais, 6- ADSO\r",
											"\r",
											"company= 3\r",
											"\r",
											"if (company=== 1) {\r",
											" pm.environment.set(\"companyName\",\"ARAMEX ABU DHABI\"); \r",
											" pm.environment.set(\"companyCode\",\"REG01760\");  \r",
											"}\r",
											"\r",
											"if (company=== 2) {\r",
											"pm.environment.set(\"companyName\",\"DHL GLOBAL FORWARDING\"); \r",
											"pm.environment.set(\"companyCode\",\"ComLSN263110\");  \r",
											"}\r",
											"\r",
											"if (company=== 3) {\r",
											"pm.environment.set(\"companyName\",\"AGILITY LOGISTICS\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA187\"); \r",
											"}\r",
											"\r",
											"if (company=== 4) {\r",
											"pm.environment.set(\"companyName\",\"AIRLINK INTERNATIONAL\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSML04\"); \r",
											"}\r",
											"\r",
											"if (company=== 5) {\r",
											"pm.environment.set(\"companyName\",\"RAIS HASSAN SAADI AND COMPANY LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA22\"); \r",
											"}\r",
											"\r",
											"if (company=== 6) {\r",
											"pm.environment.set(\"companyName\",\"ADSO LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSEXP25703\"); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-selected-org",
										"value": "",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n   \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": null,\r\n  \"airportCode\":\"AUH\",\r\n   \"carrierCode\":\"EY\",\r\n   \"originCode\":\"DEL\",\r\n   \"destinationCode\":\"AUH\",\r\n   \"quantity\":\"10\",\r\n   \"quantityUnit\":\"pcs\",\r\n   \"grossWeight\":\"111\",\r\n   \"grossWeightUnit\":\"kgs\",\r\n   \"chargeableWeight\":\"111\",\r\n   \"chargeableWeightUnit\":\"kgs\",\r\n   \"commodityDescription\":\"API Collections\",\r\n   \"Comments\":\"Dated {{today}}: AS ADDRESSED FLY AS BOOKED CARGO NOTIFY CONSIGNEE UPON ARRIVAL DOCS DOCS  ATTACHED PLEASE HANDLE WITH CARE PLEASE HANDLE WITH  CAREREFRACTORY MATERIAL INV NO 107000181 DT. 23.12.2020 CMT98-88-62X1\",\r\n   \"shcCode\":\"EAP,HEA\",\r\n   \"shipmentStatus\": \"Arrived\",\r\n   \"shipmentCode\":\"T\",\r\n   \"messageType\":\"FWB\",\r\n   \"shipperDetails\":{\r\n      \"shipperName\":\"FAIR NEW EXPORTS INDIA PVT. LTD.\",\r\n      \"shipperAddress\":\"20 1 SITE IV INDUSTRIAL AREA SAHIBABAD\",\r\n      \"shipperPlace\":\"GHAZIABAD\",\r\n      \"shipperState\":\"UP\",\r\n      \"shipperCountryCode\":\"IN\",\r\n      \"shipperPostalCode\":\"600000\",\r\n      \"shipperContactNo\":\"545452\"\r\n   },\r\n   \"consigneeDetails\":{\r\n      \"consigneeName\":\"AL TAYEB INTERNATIONAL GENERAL TRADING LLC.\",\r\n      \"consigneeAddress\":\"PREMISE NUMBER 416996710 PO BOX NO410780 416 NAD AL HAMAR\",\r\n      \"consigneePlace\":\"DUBAI\",\r\n      \"consigneeState\":\"DUBAI\",\r\n      \"consigneeCountryCode\":\"AE\",\r\n      \"consigneePostalCode\":\"410780\",\r\n      \"consigneeContactNo\":\"654665\"\r\n   },\r\n   \"agentDetails\":{\r\n      \"agentName\":\"{{companyName}}\",\r\n      \"agentClassCode\":\"1431021\",\r\n      \"agentPlaceIssue\":\"NEW DELHI\"\r\n   }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add HAWB Shipments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWB= Math.floor(100000 + Math.random() * 99999)\r",
											"pm.environment.set(\"addHAWB\",HAWB);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Verify the MAWB is created\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    pm.expect(response.data).to.equal(\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": \"SFO{{addHAWB}}\",\r\n  \"airportCode\": \"AUH\",\r\n  \"carrierCode\": \"EY\",\r\n  \"originCode\": \"MLB\",\r\n  \"destinationCode\": \"AUH\",\r\n  \"quantity\": \"10\",\r\n  \"quantityUnit\": \"pcs\",\r\n  \"grossWeight\": \"100.00\",\r\n  \"grossWeightUnit\": \"kgs\",\r\n  \"chargeableWeight\": \"100.00\",\r\n  \"chargeableWeightUnit\": \"kgs\",\r\n  \"commodityGroup\": \"Pharaceuticals\",\r\n  \"commodityDescription\": \"vaccines\",\r\n   \"Comments\":\"please handle dangerous goods with care\",\r\n  \"billofEntryNo\": null,\r\n  \"shipmentStatus\": \"Arrived\",\r\n  \"shcCode\": \"EAP\",\r\n  \"shipmentCode\":\"T\",\r\n  \"messageType\":\"FHL\",\r\n   \"shipperDetails\": {\r\n    \"shipperName\": \"DHL Melbourne\",\r\n    \"shipperAddress\": \"Victoria\",\r\n    \"shipperPlace\": \"Melbourne\",\r\n    \"shipperState\": \"Victoria\",\r\n    \"shipperCountryCode\": \"Australia\",\r\n    \"shipperPostalCode\": \"122222\",\r\n    \"shipperContactNo\": \"971676666\"\r\n  },\r\n  \"consigneeDetails\": {\r\n    \"consigneeName\": \"Kuehne + Nagel International AG\",\r\n    \"consigneeAddress\": \"Airport Road\",\r\n    \"consigneePlace\": \"Abu Dhabi\",\r\n    \"consigneeState\": \"Abu Dhabi\",\r\n    \"consigneeCountryCode\": \"UAE\",\r\n    \"consigneePostalCode\": \"122\",\r\n    \"consigneeContactNo\": \"97877878787\"\r\n  },\r\n  \"agentDetails\": {    \r\n    \"agentName\": \"FedEx\",\r\n    \"agentClassCode\": null,\r\n    \"agentPlaceIssue\": null\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Flight Schedule 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Flight Schedules Added/Updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"yesterday\",str1);\r",
											"\r",
											"fNo= Math.floor(100 + Math.random() * 9999)\r",
											"pm.environment.set(\"flightNo\",fNo);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FlightDetails\": [\r\n        {\r\n            \"origin\": \"DEL\",\r\n            \"destination\": \"AUH\",\r\n            \"carrierCode\": \"EY\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"estimatedArrival\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"FlightType\": \"P\",\r\n            \"Routing\": null,\r\n            \"FlightQualifier\": \"A\",\r\n            \"AirCraftType\": \"781\",\r\n            \"ParkingStand\": \"301\",\r\n            \"Gate\": \"70\",\r\n            \"RegistrationNumber\": \"A6BMB\",\r\n            \"CustomsReference\": \"A123\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-schedules",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-schedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Flight Details- Import  1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    //pm.expect(response.data).to.equal(\"Shipment flight detail successfully updated\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"rcvdDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"ShipmentType\": \"Import\",\r\n  \"messageType\": \"FFM\",\r\n  \"receivedDate\": \"{{rcvdDate}}\",\r\n  \"OriginDepartureInfo\": {\r\n    \"FlightNumber\": \"EY{{flightNo}}\",\r\n    \"scheduleDate\": \"{{yesterday}}\",\r\n    \"Airport\": \"DEL\",\r\n    \"AirCarftRegistration\": \"A6EIW\",\r\n    \"FirstPtOfArrival\": null\r\n  },\r\n  \"ManifestDetails\": {\r\n    \"ArrivalInfo\": {\r\n      \"airportCode\": \"AUH\",\r\n      \"ScheduledArrival\": \"{{yesterday}}\"\r\n    },\r\n    \"MAWB\": [\r\n      {\r\n        \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n        \"OriginCode\": \"DEL\",\r\n        \"shipmentCode\": \"T\",\r\n        \"DestinationCode\": \"AUH\",\r\n        \"quantity\": 200,\r\n        \"grossWeight\": 1450,\r\n        \"grossWeightUnit\": \"kgs\",\r\n        \"ULDNumber\": null,\r\n        \"IsBulk\": 1,\r\n        \"TotalQuantity\": 0,\r\n        \"GoodsDescription\": \"WATCH  WATCH BO\"\r\n      }\r\n        \r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-manifest",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-manifest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Pre DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Pre Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment')\r",
											"pm.environment.set(\"doNumber\", moment().format(\"DDMMYYYYHHMMSS\"))\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"Notes\": \"The above pre-arrival information can be used to initiate a Customs entry process through the Customs Portal. Once the cargo has been received, an updated message will be sent, showing the exact pieces and weight received, for this Delivery Order number.\",\r\n  \"NotifyDetails\": null,\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"EMIRATES SPECIALIZED CONTRACTING #{{TestNo}}\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{yesterday}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 200,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 1000.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP,ECC,GEN,GPA,TRB\",\r\n    \"TotalQuantity\": 200,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 1000.0,\r\n    \"TotalGrossWeightUnit\":\"\"    \r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 88,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 888.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 77,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 888.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"MACHINE PARTS\",\r\n    \"HandlingCodes\": \"NSC,SHR,COM,ECP,ECC\"\r\n  },\r\n  \"documentType\": \"PreDO\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate()-1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"IssueDate\",str);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FreightArrivalDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"IssueDate\": \"{{IssueDate}}\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"NotifyDetails\": \"Etihad Airport Services EAS\",\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"PoBox\": \"93971\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"JManuels\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{FlightArrivalDate}}\",\r\n    \"FreightArrivalDate\": \"{{FreightArrivalDate}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 10,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 111.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP\",\r\n    \"TotalQuantity\": 101,\r\n    \"TotalQuantityUnit\":\"pcs\",\r\n    \"TotalGrossWeight\": 101.0,\r\n    \"TotalGrossWeightUnit\":\"kgs\",\r\n    \"ChargeableWeight\": 202.0,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"rcfQuantity\": 10,\r\n    \"rcfWeight\": 111\r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 10,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 100.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 100,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 100.00,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"ChargeableWeight\": 111.00,\r\n    \"rcfQuantity\": 10,\r\n    \"rcfWeight\": 104,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"NatureofGoods\": \"Machine pars such as propellot and turbines which are used for aircrafts.\",\r\n    \"HandlingCodes\": \"\"\r\n  },\r\n\"documentType\": \"DO\",\r\n\"ProcessedBy\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add BOE details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWBNO=pm.environment.get(\"addHAWB\");\r",
											"pm.globals.set(\"HAWBNOAppt\",HAWBNO);\r",
											"\r",
											"MAWBNO=pm.environment.get(\"addMAWB\");\r",
											"pm.globals.set(\"MAWBNOAppt\",MAWBNO);\r",
											"\r",
											"FlightNo=pm.environment.get(\"flightNo\");\r",
											"pm.globals.set(\"FlightNoAppt\",FlightNo);\r",
											"\r",
											"FlightDate=pm.environment.get(\"yesterday\");\r",
											"pm.globals.set(\"DateAppt\",FlightDate);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Bill of entry updated successfully\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Bill of entry updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    //pm.expect(response.data).to.equal(null,\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n    \"ShipmentType\": \"Import\",\r\n    \"houseAwbNumber\": \"SFO{{addHAWB}}\",        \r\n    \"billofEntryNo\": \"I/2020/{{addHAWB}}\",\r\n    \"customStatus\": \"RED\"\r\n}\r\n\r\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment/billofentry",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment",
										"billofentry"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Get Timeslots Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp)\r",
											"//current_timestamp.setDate(current_timestamp.getUTCDate() + 1);\r",
											"current_timestamp.setDate(current_timestamp.getDate() + 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 10).replace(\"T\", \" \"))\r",
											"pm.environment.set(\"nextDay\",str);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Timeslots loaded Successfully\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.msg).to.eql(\"Time slots loaded successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify fetched slots are active\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var index = 0; index <= 1; index++) {\r",
											"        pm.expect(jsonData.data[index].active).to.eql(true);     \r",
											"    }  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// set timeslot as environment variable\r",
											"var response = JSON.parse(responseBody);\r",
											"impTS = response.data[2].slotTime\r",
											"impTS = impTS.slice(0, 13)\r",
											"pm.environment.set(\"impTimeSlot\", impTS)\r",
											"impSid=response.data[2].slotCode\r",
											"pm.environment.set(\"impSlotID\", impSid)\r",
											"slotstart=response.data[2].slotStartTime\r",
											"pm.environment.set(\"slotStart\", slotstart)\r",
											"slotend=response.data[2].slotEndTime\r",
											"pm.environment.set(\"slotEnd\", slotend)\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"appointmentDate\": \"{{nextDay}}\",\r\n  \"slotType\": \"Regular\",\r\n  \"vct\": 1,\r\n  \"shipments\": [\r\n    {\r\n      \"mawbNo\": null,\r\n      \"awbNo\": \"AWB-00-001\",\r\n      \"terminalCode\": \"GHQ\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    },{\r\n      \"mawbNo\": \"AWB-00-001\",\r\n      \"awbNo\": \"HBL-00-001\",\r\n      \"terminalCode\": \"GHQ\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment/import-timeslots",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment",
										"import-timeslots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Create Appointment Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status;\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    status = pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"       \r",
											"});\r",
											"\r",
											"if(status == 500){\r",
											"    pm.test(\"Appointment date is less than current date\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var myvar = jsonData.errorlst[0].error;    \r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Appointment Created Successfully\",function(){\r",
											"    var jsonData = pm.response.json();   \r",
											"    var appNo = jsonData.data.appointmentNo;\r",
											"    pm.test(\"Appointment Number - \"+appNo); \r",
											"    postman.setEnvironmentVariable(\"appointmentNo\", appNo);\r",
											"    postman.setEnvironmentVariable(\"ApptNo\", appNo);\r",
											"    pm.expect(jsonData.msg).to.eql(\"Appointment saved successfully\");\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp.toISOString())\r",
											"current_timestamp.setHours(current_timestamp.getHours() + 2); \r",
											"//console.log(current_timestamp.toISOString())\r",
											"pm.environment.set(\"current_timestamp\", current_timestamp.toISOString());\r",
											"\r",
											"vNo= Math.floor(100000 + Math.random() * 900000)\r",
											"pm.environment.set(\"vehicleNoappt\",vNo);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"appointmentNo\": null,\r\n    \"referenceID\": \"\",\r\n    \"appointmentDate\": \"{{nextDay}}\",\r\n    \"type\": \"imports\",\r\n    \"slotType\": \"Regular\",\r\n    \"slotTime\": \"{{impTimeSlot}}\",\r\n    \"paymentTerm\": \"Direct Checkin(Credit)\",\r\n    \"contactName\": \"Thomas Muller\",\r\n    \"contactEmail\": \"balakumaran.govardha@maqta.ae\",\r\n    \"contactNumber\": \"051468761\",\r\n    \"companyName\":\"AGILITY LOGISTICS\",\r\n    \"status\": \"Confirmed\",\r\n    \"slotCode\": \"{{impSlotID}}\",\r\n    \"slotStartTime\": \"{{slotStart}}\",\r\n    \"slotEndTime\": \"{{slotEnd}}\",\r\n    \"cargoType\": \"\",\r\n    \"awbDetails\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"b4d574a5-9880-4f2a-9aea-e882ea2328b5\",\r\n            \"awbReferenceNumber\": \"607-{{addMAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 200,\r\n            \"grossWeight\": 1450,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 1000,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"terminalCode\": \"GHQ\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": \"EY\",\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04(GHQ)\",\r\n            \"shcCode\": \"EAP,API\",\r\n            \"MawbTerminalCode\": \"GHQ\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        },\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"f45e4c87-526c-4eb1-8623-2506abb58951\",\r\n            \"awbReferenceNumber\": \"SFO{{addHAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 10,\r\n            \"grossWeight\": 1000,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 111,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"parentAWBReference\": \"607-{{addMAWB}}\",\r\n            \"terminalCode\": \"GHQ\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": null,\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04(GHQ)\",\r\n            \"shcCode\": \"EAP\",\r\n            \"MawbTerminalCode\": \"GHQ\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        }\r\n    ],\r\n    \"driverVehicles\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"driverName\": \"Thomas Muller\",\r\n            \"driverContactNo\": \"051468761\",\r\n            \"vehicleNo\": \"{{vehicleNoappt}}\",\r\n            \"vehicleType\": \"3 Ton\",\r\n            \"active\": true,\r\n            \"createdDate\": \"{{yesterday}}\",\r\n            \"createdBy\": \"System\",\r\n            \"checked\": true\r\n        }\r\n    ],\r\n    \"palletPieces\": 0,\r\n    \"nonPalletPieces\": 0,\r\n    \"appointmentDocuments\": [],\r\n    \"appointmentAdditionalServiceDTO\": [],\r\n    \"SpecialHanInstn\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Payment Charges Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status;\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    status = pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"       \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Appointment confirmed Successfully\",function(){\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.msg).to.eql(\"Freight charges payment saved successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-awbcharges",
										"value": "[{\"Key\":\"MAWB\",\"Value\":\"607-{{addMAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":\"T\"},{\"Key\":\"HAWB\",\"Value\":\"SFO{{addHAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":\"T\"},{\"Key\":\"MAWB\",\"Value\":\"607-{{addMAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":null}]",
										"type": "text",
										"disabled": true
									},
									{
										"key": "paymentType",
										"value": "Direct Checkin(Credit)",
										"type": "text",
										"disabled": true
									},
									{
										"key": "refereneceNo",
										"value": "{{appointmentNo}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "appointmentDate",
										"value": "{{nextDay}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "slottime",
										"value": "{{impTimeSlot}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AwbCharges\": [\r\n        {\r\n            \"Key\": \"MAWB\",\r\n            \"Value\": \"607-{{addMAWB}}\",\r\n            \"FlightNumber\": \"EY{{flightNo}}\",\r\n            \"FlightDate\": \"{{yesterday}}\",\r\n            \"ShipmentCode\": \"T\"\r\n        },\r\n        {\r\n            \"Key\": \"HAWB\",\r\n            \"Value\": \"SFO{{addHAWB}}\",\r\n            \"FlightNumber\": \"EY{{flightNo}}\",\r\n            \"FlightDate\": \"{{yesterday}}\",\r\n            \"ShipmentCode\": \"T\"\r\n        }        \r\n    ],\r\n    \"refereneceNo\": \"{{appointmentNo}}\",\r\n    \"appointmentDate\": \"{{nextDay}}\",\r\n    \"SlotTime\": \"{{impTimeSlot}}\",\r\n    \"paymentType\": \"Direct Checkin(Credit)\",    \r\n    \"SlotType\": \"Regular\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Charges/import-shipment/payment-freight-charges",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Charges",
										"import-shipment",
										"payment-freight-charges"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.request.headers.add({ key: 'x-selected-org', value: pm.collectionVariables.get(\"Selected_OrgFF\")});",
									"",
									" pm.request.headers.add({key:'x-client-Id',value: 'EB30882C-C83D-468D-9A8A-CB23822203D7' });",
									"",
									"  pm.request.headers.add({key:'x-client-secret',value: 'NLzDQknON4yPgd1EOyeI1h7FyvpAWOLpWFkrtjCN4fITb039OmnlyLUOXwPWlJsn3EHur2HUO3PHRnaRY3vwaw53nOaPd8V3VPuZUHxpI8kPKvJPoQx0DzRIrXYV5aDW5hZnwhYC5cII0fv7IGwLz4iA00TK2upvI7p4cLnLTe4hpJuWpvjkB5N1CwRHmYjflg0x7YH3YhlMlVOIvZtDjvEUfTxsVPX6CnJlNa32lyrDgu7yyJz6syeG5gtZ56Bi' });",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Add Shipments + Create appt- DHL",
					"item": [
						{
							"name": "Imports: Add MAWB Shipment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"MAWB= Math.floor(10000000 + Math.random() * 90000000)\r",
											"pm.environment.set(\"addMAWB\",MAWB);\r",
											"\r",
											"//1- Aramex, 2-DHL, 3-  Agility, 4- Airlink, 5- Rais, 6- ADSO\r",
											"\r",
											"company= 2\r",
											"\r",
											"if (company=== 1) {\r",
											" pm.environment.set(\"companyName\",\"ARAMEX ABU DHABI\"); \r",
											" pm.environment.set(\"companyCode\",\"REG01760\");  \r",
											"}\r",
											"\r",
											"if (company=== 2) {\r",
											"pm.environment.set(\"companyName\",\"DHL GLOBAL FORWARDING\"); \r",
											"pm.environment.set(\"companyCode\",\"ComLSN263110\");  \r",
											"}\r",
											"\r",
											"if (company=== 3) {\r",
											"pm.environment.set(\"companyName\",\"AGILITY LOGISTICS\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA187\"); \r",
											"}\r",
											"\r",
											"if (company=== 4) {\r",
											"pm.environment.set(\"companyName\",\"AIRLINK INTERNATIONAL\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSML04\"); \r",
											"}\r",
											"\r",
											"if (company=== 5) {\r",
											"pm.environment.set(\"companyName\",\"RAIS HASSAN SAADI AND COMPANY LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA22\"); \r",
											"}\r",
											"\r",
											"if (company=== 6) {\r",
											"pm.environment.set(\"companyName\",\"ADSO LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSEXP25703\"); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-selected-org",
										"value": "",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n   \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": null,\r\n  \"airportCode\":\"AUH\",\r\n   \"carrierCode\":\"EY\",\r\n   \"originCode\":\"DEL\",\r\n   \"destinationCode\":\"AUH\",\r\n   \"quantity\":\"200\",\r\n   \"quantityUnit\":\"pcs\",\r\n   \"grossWeight\":\"222\",\r\n   \"grossWeightUnit\":\"kgs\",\r\n   \"chargeableWeight\":\"212\",\r\n   \"chargeableWeightUnit\":\"kgs\",\r\n   \"commodityDescription\":\"API Collections\",\r\n   \"Comments\":\"Dated {{today}}: AS ADDRESSED FLY AS BOOKED CARGO NOTIFY CONSIGNEE UPON ARRIVAL DOCS DOCS  ATTACHED PLEASE HANDLE WITH CARE PLEASE HANDLE WITH  CAREREFRACTORY MATERIAL INV NO 107000181 DT. 23.12.2020 CMT98-88-62X1\",\r\n   \"shcCode\":\"EAP,API\",\r\n   \"shipmentStatus\": \"Arrived\",\r\n   \"shipmentCode\":\"T\",\r\n   \"messageType\":\"FWB\",\r\n   \"shipperDetails\":{\r\n      \"shipperName\":\"FAIR NEW EXPORTS INDIA PVT. LTD.\",\r\n      \"shipperAddress\":\"20 1 SITE IV INDUSTRIAL AREA SAHIBABAD\",\r\n      \"shipperPlace\":\"GHAZIABAD\",\r\n      \"shipperState\":\"UP\",\r\n      \"shipperCountryCode\":\"IN\",\r\n      \"shipperPostalCode\":\"600000\",\r\n      \"shipperContactNo\":\"545452\"\r\n   },\r\n   \"consigneeDetails\":{\r\n      \"consigneeName\":\"AL TAYEB INTERNATIONAL GENERAL TRADING LLC.\",\r\n      \"consigneeAddress\":\"PREMISE NUMBER 416996710 PO BOX NO410780 416 NAD AL HAMAR\",\r\n      \"consigneePlace\":\"DUBAI\",\r\n      \"consigneeState\":\"DUBAI\",\r\n      \"consigneeCountryCode\":\"AE\",\r\n      \"consigneePostalCode\":\"410780\",\r\n      \"consigneeContactNo\":\"654665\"\r\n   },\r\n   \"agentDetails\":{\r\n      \"agentName\":\"{{companyName}}\",\r\n      \"agentClassCode\":\"1431021\",\r\n      \"agentPlaceIssue\":\"NEW DELHI\"\r\n   }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add HAWB Shipments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWB= Math.floor(100000 + Math.random() * 99999)\r",
											"pm.environment.set(\"addHAWB\",HAWB);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Verify the MAWB is created\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    pm.expect(response.data).to.equal(\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": \"SFO{{addHAWB}}\",\r\n  \"airportCode\": \"AUH\",\r\n  \"carrierCode\": \"EY\",\r\n  \"originCode\": \"MLB\",\r\n  \"destinationCode\": \"AUH\",\r\n  \"quantity\": \"10\",\r\n  \"quantityUnit\": \"pcs\",\r\n  \"grossWeight\": \"1000.00\",\r\n  \"grossWeightUnit\": \"kgs\",\r\n  \"chargeableWeight\": \"1000.00\",\r\n  \"chargeableWeightUnit\": \"kgs\",\r\n  \"commodityGroup\": \"Pharaceuticals\",\r\n  \"commodityDescription\": \"vaccines\",\r\n   \"Comments\":\"please handle dangerous goods with care\",\r\n  \"billofEntryNo\": null,\r\n  \"shipmentStatus\": \"Arrived\",\r\n  \"shcCode\": \"EAP\",\r\n  \"shipmentCode\":\"T\",\r\n  \"messageType\":\"FHL\",\r\n   \"shipperDetails\": {\r\n    \"shipperName\": \"DHL Melbourne\",\r\n    \"shipperAddress\": \"Victoria\",\r\n    \"shipperPlace\": \"Melbourne\",\r\n    \"shipperState\": \"Victoria\",\r\n    \"shipperCountryCode\": \"Australia\",\r\n    \"shipperPostalCode\": \"122222\",\r\n    \"shipperContactNo\": \"971676666\"\r\n  },\r\n  \"consigneeDetails\": {\r\n    \"consigneeName\": \"Kuehne + Nagel International AG\",\r\n    \"consigneeAddress\": \"Airport Road\",\r\n    \"consigneePlace\": \"Abu Dhabi\",\r\n    \"consigneeState\": \"Abu Dhabi\",\r\n    \"consigneeCountryCode\": \"UAE\",\r\n    \"consigneePostalCode\": \"122\",\r\n    \"consigneeContactNo\": \"97877878787\"\r\n  },\r\n  \"agentDetails\": {    \r\n    \"agentName\": \"FedEx\",\r\n    \"agentClassCode\": null,\r\n    \"agentPlaceIssue\": null\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Flight Schedule 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Flight Schedules Added/Updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"yesterday\",str1);\r",
											"\r",
											"fNo= Math.floor(100 + Math.random() * 9999)\r",
											"pm.environment.set(\"flightNo\",fNo);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FlightDetails\": [\r\n        {\r\n            \"origin\": \"DEL\",\r\n            \"destination\": \"AUH\",\r\n            \"carrierCode\": \"EY\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"estimatedArrival\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"FlightType\": \"P\",\r\n            \"Routing\": null,\r\n            \"FlightQualifier\": \"A\",\r\n            \"AirCraftType\": \"781\",\r\n            \"ParkingStand\": \"301\",\r\n            \"Gate\": \"70\",\r\n            \"RegistrationNumber\": \"A6BMB\",\r\n            \"CustomsReference\": \"A123\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-schedules",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-schedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Flight Details- Import  1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    //pm.expect(response.data).to.equal(\"Shipment flight detail successfully updated\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"rcvdDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"ShipmentType\": \"Import\",\r\n  \"messageType\": \"FFM\",\r\n  \"receivedDate\": \"{{rcvdDate}}\",\r\n  \"OriginDepartureInfo\": {\r\n    \"FlightNumber\": \"EY{{flightNo}}\",\r\n    \"scheduleDate\": \"{{yesterday}}\",\r\n    \"Airport\": \"DEL\",\r\n    \"AirCarftRegistration\": \"A6EIW\",\r\n    \"FirstPtOfArrival\": null\r\n  },\r\n  \"ManifestDetails\": {\r\n    \"ArrivalInfo\": {\r\n      \"airportCode\": \"AUH\",\r\n      \"ScheduledArrival\": \"{{yesterday}}\"\r\n    },\r\n    \"MAWB\": [\r\n      {\r\n        \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n        \"OriginCode\": \"DEL\",\r\n        \"shipmentCode\": \"T\",\r\n        \"DestinationCode\": \"AUH\",\r\n        \"quantity\": 200,\r\n        \"grossWeight\": 1450,\r\n        \"grossWeightUnit\": \"kgs\",\r\n        \"ULDNumber\": null,\r\n        \"IsBulk\": 1,\r\n        \"TotalQuantity\": 0,\r\n        \"GoodsDescription\": \"WATCH  WATCH BO\"\r\n      }\r\n        \r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-manifest",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-manifest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Pre DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Pre Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment')\r",
											"pm.environment.set(\"doNumber\", moment().format(\"DDMMYYYYHHMMSS\"))\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"Notes\": \"The above pre-arrival information can be used to initiate a Customs entry process through the Customs Portal. Once the cargo has been received, an updated message will be sent, showing the exact pieces and weight received, for this Delivery Order number.\",\r\n  \"NotifyDetails\": null,\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"EMIRATES SPECIALIZED CONTRACTING #{{TestNo}}\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{yesterday}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 200,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 1000.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP,ECC,GEN,GPA,TRB\",\r\n    \"TotalQuantity\": 200,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 1000.0,\r\n    \"TotalGrossWeightUnit\":\"\"    \r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 88,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 888.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 77,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 888.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"MACHINE PARTS\",\r\n    \"HandlingCodes\": \"NSC,SHR,COM,ECP,ECC\"\r\n  },\r\n  \"documentType\": \"PreDO\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate()-1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"IssueDate\",str);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FreightArrivalDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"IssueDate\": \"{{IssueDate}}\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"NotifyDetails\": \"Etihad Airport Services EAS\",\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"PoBox\": \"93971\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"JManuels\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{FlightArrivalDate}}\",\r\n    \"FreightArrivalDate\": \"{{FreightArrivalDate}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 200,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 888.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP\",\r\n    \"TotalQuantity\": 101,\r\n    \"TotalQuantityUnit\":\"pcs\",\r\n    \"TotalGrossWeight\": 101.0,\r\n    \"TotalGrossWeightUnit\":\"kgs\",\r\n    \"ChargeableWeight\": 202.0,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"rcfQuantity\": 199,\r\n    \"rcfWeight\": 202\r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 10,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 100.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 100,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 100.00,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"ChargeableWeight\": 111.00,\r\n    \"rcfQuantity\": 10,\r\n    \"rcfWeight\": 104,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"NatureofGoods\": \"Machine pars such as propellot and turbines which are used for aircrafts.\",\r\n    \"HandlingCodes\": \"\"\r\n  },\r\n\"documentType\": \"DO\",\r\n\"ProcessedBy\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add BOE details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWBNO=pm.environment.get(\"addHAWB\");\r",
											"pm.globals.set(\"HAWBNOAppt\",HAWBNO);\r",
											"\r",
											"MAWBNO=pm.environment.get(\"addMAWB\");\r",
											"pm.globals.set(\"MAWBNOAppt\",MAWBNO);\r",
											"\r",
											"FlightNo=pm.environment.get(\"flightNo\");\r",
											"pm.globals.set(\"FlightNoAppt\",FlightNo);\r",
											"\r",
											"FlightDate=pm.environment.get(\"yesterday\");\r",
											"pm.globals.set(\"DateAppt\",FlightDate);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Bill of entry updated successfully\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Bill of entry updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    //pm.expect(response.data).to.equal(null,\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n    \"ShipmentType\": \"Import\",\r\n    \"houseAwbNumber\": \"SFO{{addHAWB}}\",        \r\n    \"billofEntryNo\": \"I/2020/{{addHAWB}}\",\r\n    \"customStatus\": \"RED\"\r\n}\r\n\r\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment/billofentry",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment",
										"billofentry"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Get Timeslots Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp)\r",
											"//current_timestamp.setDate(current_timestamp.getUTCDate() + 1);\r",
											"current_timestamp.setDate(current_timestamp.getDate() + 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 10).replace(\"T\", \" \"))\r",
											"pm.environment.set(\"nextDay\",str);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Timeslots loaded Successfully\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.msg).to.eql(\"Time slots loaded successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify fetched slots are active\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var index = 0; index <= 1; index++) {\r",
											"        pm.expect(jsonData.data[index].active).to.eql(true);     \r",
											"    }  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// set timeslot as environment variable\r",
											"var response = JSON.parse(responseBody);\r",
											"impTS = response.data[2].slotTime\r",
											"impTS = impTS.slice(0, 13)\r",
											"pm.environment.set(\"impTimeSlot\", impTS)\r",
											"impSid=response.data[2].slotCode\r",
											"pm.environment.set(\"impSlotID\", impSid)\r",
											"slotstart=response.data[2].slotStartTime\r",
											"pm.environment.set(\"slotStart\", slotstart)\r",
											"slotend=response.data[2].slotEndTime\r",
											"pm.environment.set(\"slotEnd\", slotend)\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"appointmentDate\": \"{{nextDay}}\",\r\n  \"slotType\": \"Regular\",\r\n  \"vct\": 1,\r\n  \"shipments\": [\r\n    {\r\n      \"mawbNo\": null,\r\n      \"awbNo\": \"AWB-00-001\",\r\n      \"terminalCode\": \"GHQ\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    },{\r\n      \"mawbNo\": \"AWB-00-001\",\r\n      \"awbNo\": \"HBL-00-001\",\r\n      \"terminalCode\": \"GHQ\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment/import-timeslots",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment",
										"import-timeslots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Create Appointment Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status;\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    status = pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"       \r",
											"});\r",
											"\r",
											"if(status == 500){\r",
											"    pm.test(\"Appointment date is less than current date\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var myvar = jsonData.errorlst[0].error;    \r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Appointment Created Successfully\",function(){\r",
											"    var jsonData = pm.response.json();   \r",
											"    var appNo = jsonData.data.appointmentNo;\r",
											"    pm.test(\"Appointment Number - \"+appNo); \r",
											"    postman.setEnvironmentVariable(\"appointmentNo\", appNo);\r",
											"    postman.setEnvironmentVariable(\"ApptNo\", appNo);\r",
											"    pm.expect(jsonData.msg).to.eql(\"Appointment saved successfully\");\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp.toISOString())\r",
											"current_timestamp.setHours(current_timestamp.getHours() + 2); \r",
											"//console.log(current_timestamp.toISOString())\r",
											"pm.environment.set(\"current_timestamp\", current_timestamp.toISOString());\r",
											"\r",
											"vNo= Math.floor(100000 + Math.random() * 900000)\r",
											"pm.environment.set(\"vehicleNoappt\",vNo);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"appointmentNo\": null,\r\n    \"referenceID\": \"\",\r\n    \"appointmentDate\": \"{{nextDay}}\",\r\n    \"type\": \"imports\",\r\n    \"slotType\": \"Regular\",\r\n    \"slotTime\": \"{{impTimeSlot}}\",\r\n    \"paymentTerm\": \"Direct Checkin(Credit)\",\r\n    \"contactName\": \"Thomas Muller\",\r\n    \"contactEmail\": \"balakumaran.govardha@maqta.ae\",\r\n    \"contactNumber\": \"051468761\",\r\n    \"companyName\":\"AGILITY LOGISTICS\",\r\n    \"status\": \"Confirmed\",\r\n    \"slotCode\": \"{{impSlotID}}\",\r\n    \"slotStartTime\": \"{{slotStart}}\",\r\n    \"slotEndTime\": \"{{slotEnd}}\",\r\n    \"cargoType\": \"\",\r\n    \"awbDetails\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"b4d574a5-9880-4f2a-9aea-e882ea2328b5\",\r\n            \"awbReferenceNumber\": \"607-{{addMAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 200,\r\n            \"grossWeight\": 1450,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 1000,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"terminalCode\": \"GHQ\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": \"EY\",\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04(GHQ)\",\r\n            \"shcCode\": \"EAP,API\",\r\n            \"MawbTerminalCode\": \"GHQ\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        },\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"f45e4c87-526c-4eb1-8623-2506abb58951\",\r\n            \"awbReferenceNumber\": \"SFO{{addHAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 10,\r\n            \"grossWeight\": 1000,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 111,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"parentAWBReference\": \"607-{{addMAWB}}\",\r\n            \"terminalCode\": \"GHQ\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": null,\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04(GHQ)\",\r\n            \"shcCode\": \"EAP\",\r\n            \"MawbTerminalCode\": \"GHQ\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        }\r\n    ],\r\n    \"driverVehicles\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"driverName\": \"Thomas Muller\",\r\n            \"driverContactNo\": \"051468761\",\r\n            \"vehicleNo\": \"{{vehicleNoappt}}\",\r\n            \"vehicleType\": \"3 Ton\",\r\n            \"active\": true,\r\n            \"createdDate\": \"{{yesterday}}\",\r\n            \"createdBy\": \"System\",\r\n            \"checked\": true\r\n        }\r\n    ],\r\n    \"palletPieces\": 0,\r\n    \"nonPalletPieces\": 0,\r\n    \"appointmentDocuments\": [],\r\n    \"appointmentAdditionalServiceDTO\": [],\r\n    \"SpecialHanInstn\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Payment Charges Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status;\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    status = pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"       \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Appointment confirmed Successfully\",function(){\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.msg).to.eql(\"Freight charges payment saved successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-awbcharges",
										"value": "[{\"Key\":\"MAWB\",\"Value\":\"607-{{addMAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":\"T\"},{\"Key\":\"HAWB\",\"Value\":\"SFO{{addHAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":\"T\"},{\"Key\":\"MAWB\",\"Value\":\"607-{{addMAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":null}]",
										"type": "text",
										"disabled": true
									},
									{
										"key": "paymentType",
										"value": "Direct Checkin(Credit)",
										"type": "text",
										"disabled": true
									},
									{
										"key": "refereneceNo",
										"value": "{{appointmentNo}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "appointmentDate",
										"value": "{{nextDay}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "slottime",
										"value": "{{impTimeSlot}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AwbCharges\": [\r\n        {\r\n            \"Key\": \"MAWB\",\r\n            \"Value\": \"607-{{addMAWB}}\",\r\n            \"FlightNumber\": \"EY{{flightNo}}\",\r\n            \"FlightDate\": \"{{yesterday}}\",\r\n            \"ShipmentCode\": \"T\"\r\n        },\r\n        {\r\n            \"Key\": \"HAWB\",\r\n            \"Value\": \"SFO{{addHAWB}}\",\r\n            \"FlightNumber\": \"EY{{flightNo}}\",\r\n            \"FlightDate\": \"{{yesterday}}\",\r\n            \"ShipmentCode\": \"T\"\r\n        }        \r\n    ],\r\n    \"refereneceNo\": \"{{appointmentNo}}\",\r\n    \"appointmentDate\": \"{{nextDay}}\",\r\n    \"SlotTime\": \"{{impTimeSlot}}\",\r\n    \"paymentType\": \"Direct Checkin(Credit)\",    \r\n    \"SlotType\": \"Regular\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Charges/import-shipment/payment-freight-charges",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Charges",
										"import-shipment",
										"payment-freight-charges"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.request.headers.add({ key: 'x-selected-org', value: pm.collectionVariables.get(\"SelectedOrg_DHL\")});",
									"",
									" pm.request.headers.add({key:'x-client-Id',value: 'EB30882C-C83D-468D-9A8A-CB23822203D7' });",
									"",
									"  pm.request.headers.add({key:'x-client-secret',value: 'NLzDQknON4yPgd1EOyeI1h7FyvpAWOLpWFkrtjCN4fITb039OmnlyLUOXwPWlJsn3EHur2HUO3PHRnaRY3vwaw53nOaPd8V3VPuZUHxpI8kPKvJPoQx0DzRIrXYV5aDW5hZnwhYC5cII0fv7IGwLz4iA00TK2upvI7p4cLnLTe4hpJuWpvjkB5N1CwRHmYjflg0x7YH3YhlMlVOIvZtDjvEUfTxsVPX6CnJlNa32lyrDgu7yyJz6syeG5gtZ56Bi' });",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Add Shipments + Create appt- DHL Draft",
					"item": [
						{
							"name": "Imports: Add MAWB Shipment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"MAWB= Math.floor(10000000 + Math.random() * 90000000)\r",
											"pm.environment.set(\"addMAWB\",MAWB);\r",
											"\r",
											"//1- Aramex, 2-DHL, 3-  Agility, 4- Airlink, 5- Rais, 6- ADSO\r",
											"\r",
											"company= 2\r",
											"\r",
											"if (company=== 1) {\r",
											" pm.environment.set(\"companyName\",\"ARAMEX ABU DHABI\"); \r",
											" pm.environment.set(\"companyCode\",\"REG01760\");  \r",
											"}\r",
											"\r",
											"if (company=== 2) {\r",
											"pm.environment.set(\"companyName\",\"DHL GLOBAL FORWARDING\"); \r",
											"pm.environment.set(\"companyCode\",\"ComLSN263110\");  \r",
											"}\r",
											"\r",
											"if (company=== 3) {\r",
											"pm.environment.set(\"companyName\",\"AGILITY LOGISTICS\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA187\"); \r",
											"}\r",
											"\r",
											"if (company=== 4) {\r",
											"pm.environment.set(\"companyName\",\"AIRLINK INTERNATIONAL\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSML04\"); \r",
											"}\r",
											"\r",
											"if (company=== 5) {\r",
											"pm.environment.set(\"companyName\",\"RAIS HASSAN SAADI AND COMPANY LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA22\"); \r",
											"}\r",
											"\r",
											"if (company=== 6) {\r",
											"pm.environment.set(\"companyName\",\"ADSO LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSEXP25703\"); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-selected-org",
										"value": "",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n   \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": null,\r\n  \"airportCode\":\"AUH\",\r\n   \"carrierCode\":\"EY\",\r\n   \"originCode\":\"DEL\",\r\n   \"destinationCode\":\"AUH\",\r\n   \"quantity\":\"200\",\r\n   \"quantityUnit\":\"pcs\",\r\n   \"grossWeight\":\"222\",\r\n   \"grossWeightUnit\":\"kgs\",\r\n   \"chargeableWeight\":\"212\",\r\n   \"chargeableWeightUnit\":\"kgs\",\r\n   \"commodityDescription\":\"API Collections\",\r\n   \"Comments\":\"Dated {{today}}: AS ADDRESSED FLY AS BOOKED CARGO NOTIFY CONSIGNEE UPON ARRIVAL DOCS DOCS  ATTACHED PLEASE HANDLE WITH CARE PLEASE HANDLE WITH  CAREREFRACTORY MATERIAL INV NO 107000181 DT. 23.12.2020 CMT98-88-62X1\",\r\n   \"shcCode\":\"EAP,API\",\r\n   \"shipmentStatus\": \"Arrived\",\r\n   \"shipmentCode\":\"T\",\r\n   \"messageType\":\"FWB\",\r\n   \"shipperDetails\":{\r\n      \"shipperName\":\"FAIR NEW EXPORTS INDIA PVT. LTD.\",\r\n      \"shipperAddress\":\"20 1 SITE IV INDUSTRIAL AREA SAHIBABAD\",\r\n      \"shipperPlace\":\"GHAZIABAD\",\r\n      \"shipperState\":\"UP\",\r\n      \"shipperCountryCode\":\"IN\",\r\n      \"shipperPostalCode\":\"600000\",\r\n      \"shipperContactNo\":\"545452\"\r\n   },\r\n   \"consigneeDetails\":{\r\n      \"consigneeName\":\"AL TAYEB INTERNATIONAL GENERAL TRADING LLC.\",\r\n      \"consigneeAddress\":\"PREMISE NUMBER 416996710 PO BOX NO410780 416 NAD AL HAMAR\",\r\n      \"consigneePlace\":\"DUBAI\",\r\n      \"consigneeState\":\"DUBAI\",\r\n      \"consigneeCountryCode\":\"AE\",\r\n      \"consigneePostalCode\":\"410780\",\r\n      \"consigneeContactNo\":\"654665\"\r\n   },\r\n   \"agentDetails\":{\r\n      \"agentName\":\"{{companyName}}\",\r\n      \"agentClassCode\":\"1431021\",\r\n      \"agentPlaceIssue\":\"NEW DELHI\"\r\n   }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add HAWB Shipments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWB= Math.floor(100000 + Math.random() * 99999)\r",
											"pm.environment.set(\"addHAWB\",HAWB);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Verify the MAWB is created\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    pm.expect(response.data).to.equal(\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": \"SFO{{addHAWB}}\",\r\n  \"airportCode\": \"AUH\",\r\n  \"carrierCode\": \"EY\",\r\n  \"originCode\": \"MLB\",\r\n  \"destinationCode\": \"AUH\",\r\n  \"quantity\": \"10\",\r\n  \"quantityUnit\": \"pcs\",\r\n  \"grossWeight\": \"1000.00\",\r\n  \"grossWeightUnit\": \"kgs\",\r\n  \"chargeableWeight\": \"1000.00\",\r\n  \"chargeableWeightUnit\": \"kgs\",\r\n  \"commodityGroup\": \"Pharaceuticals\",\r\n  \"commodityDescription\": \"vaccines\",\r\n   \"Comments\":\"please handle dangerous goods with care\",\r\n  \"billofEntryNo\": null,\r\n  \"shipmentStatus\": \"Arrived\",\r\n  \"shcCode\": \"EAP\",\r\n  \"shipmentCode\":\"T\",\r\n  \"messageType\":\"FHL\",\r\n   \"shipperDetails\": {\r\n    \"shipperName\": \"DHL Melbourne\",\r\n    \"shipperAddress\": \"Victoria\",\r\n    \"shipperPlace\": \"Melbourne\",\r\n    \"shipperState\": \"Victoria\",\r\n    \"shipperCountryCode\": \"Australia\",\r\n    \"shipperPostalCode\": \"122222\",\r\n    \"shipperContactNo\": \"971676666\"\r\n  },\r\n  \"consigneeDetails\": {\r\n    \"consigneeName\": \"Kuehne + Nagel International AG\",\r\n    \"consigneeAddress\": \"Airport Road\",\r\n    \"consigneePlace\": \"Abu Dhabi\",\r\n    \"consigneeState\": \"Abu Dhabi\",\r\n    \"consigneeCountryCode\": \"UAE\",\r\n    \"consigneePostalCode\": \"122\",\r\n    \"consigneeContactNo\": \"97877878787\"\r\n  },\r\n  \"agentDetails\": {    \r\n    \"agentName\": \"FedEx\",\r\n    \"agentClassCode\": null,\r\n    \"agentPlaceIssue\": null\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Flight Schedule 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Flight Schedules Added/Updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"yesterday\",str1);\r",
											"\r",
											"fNo= Math.floor(100 + Math.random() * 9999)\r",
											"pm.environment.set(\"flightNo\",fNo);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FlightDetails\": [\r\n        {\r\n            \"origin\": \"DEL\",\r\n            \"destination\": \"AUH\",\r\n            \"carrierCode\": \"EY\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"estimatedArrival\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"FlightType\": \"P\",\r\n            \"Routing\": null,\r\n            \"FlightQualifier\": \"A\",\r\n            \"AirCraftType\": \"781\",\r\n            \"ParkingStand\": \"301\",\r\n            \"Gate\": \"70\",\r\n            \"RegistrationNumber\": \"A6BMB\",\r\n            \"CustomsReference\": \"A123\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-schedules",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-schedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Flight Details- Import  1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    //pm.expect(response.data).to.equal(\"Shipment flight detail successfully updated\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"rcvdDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"ShipmentType\": \"Import\",\r\n  \"messageType\": \"FFM\",\r\n  \"receivedDate\": \"{{rcvdDate}}\",\r\n  \"OriginDepartureInfo\": {\r\n    \"FlightNumber\": \"EY{{flightNo}}\",\r\n    \"scheduleDate\": \"{{yesterday}}\",\r\n    \"Airport\": \"DEL\",\r\n    \"AirCarftRegistration\": \"A6EIW\",\r\n    \"FirstPtOfArrival\": null\r\n  },\r\n  \"ManifestDetails\": {\r\n    \"ArrivalInfo\": {\r\n      \"airportCode\": \"AUH\",\r\n      \"ScheduledArrival\": \"{{yesterday}}\"\r\n    },\r\n    \"MAWB\": [\r\n      {\r\n        \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n        \"OriginCode\": \"DEL\",\r\n        \"shipmentCode\": \"T\",\r\n        \"DestinationCode\": \"AUH\",\r\n        \"quantity\": 200,\r\n        \"grossWeight\": 1450,\r\n        \"grossWeightUnit\": \"kgs\",\r\n        \"ULDNumber\": null,\r\n        \"IsBulk\": 1,\r\n        \"TotalQuantity\": 0,\r\n        \"GoodsDescription\": \"WATCH  WATCH BO\"\r\n      }\r\n        \r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-manifest",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-manifest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Pre DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Pre Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment')\r",
											"pm.environment.set(\"doNumber\", moment().format(\"DDMMYYYYHHMMSS\"))\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"Notes\": \"The above pre-arrival information can be used to initiate a Customs entry process through the Customs Portal. Once the cargo has been received, an updated message will be sent, showing the exact pieces and weight received, for this Delivery Order number.\",\r\n  \"NotifyDetails\": null,\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"EMIRATES SPECIALIZED CONTRACTING #{{TestNo}}\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{yesterday}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 200,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 1000.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP,ECC,GEN,GPA,TRB\",\r\n    \"TotalQuantity\": 200,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 1000.0,\r\n    \"TotalGrossWeightUnit\":\"\"    \r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 88,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 888.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 77,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 888.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"MACHINE PARTS\",\r\n    \"HandlingCodes\": \"NSC,SHR,COM,ECP,ECC\"\r\n  },\r\n  \"documentType\": \"PreDO\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate()-1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"IssueDate\",str);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FreightArrivalDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"IssueDate\": \"{{IssueDate}}\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"NotifyDetails\": \"Etihad Airport Services EAS\",\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"PoBox\": \"93971\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"JManuels\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{FlightArrivalDate}}\",\r\n    \"FreightArrivalDate\": \"{{FreightArrivalDate}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 200,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 888.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP\",\r\n    \"TotalQuantity\": 101,\r\n    \"TotalQuantityUnit\":\"pcs\",\r\n    \"TotalGrossWeight\": 101.0,\r\n    \"TotalGrossWeightUnit\":\"kgs\",\r\n    \"ChargeableWeight\": 202.0,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"rcfQuantity\": 199,\r\n    \"rcfWeight\": 202\r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 10,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 100.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 100,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 100.00,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"ChargeableWeight\": 111.00,\r\n    \"rcfQuantity\": 10,\r\n    \"rcfWeight\": 104,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"NatureofGoods\": \"Machine pars such as propellot and turbines which are used for aircrafts.\",\r\n    \"HandlingCodes\": \"\"\r\n  },\r\n\"documentType\": \"DO\",\r\n\"ProcessedBy\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add BOE details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWBNO=pm.environment.get(\"addHAWB\");\r",
											"pm.globals.set(\"HAWBNOAppt\",HAWBNO);\r",
											"\r",
											"MAWBNO=pm.environment.get(\"addMAWB\");\r",
											"pm.globals.set(\"MAWBNOAppt\",MAWBNO);\r",
											"\r",
											"FlightNo=pm.environment.get(\"flightNo\");\r",
											"pm.globals.set(\"FlightNoAppt\",FlightNo);\r",
											"\r",
											"FlightDate=pm.environment.get(\"yesterday\");\r",
											"pm.globals.set(\"DateAppt\",FlightDate);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Bill of entry updated successfully\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Bill of entry updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    //pm.expect(response.data).to.equal(null,\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n    \"ShipmentType\": \"Import\",\r\n    \"houseAwbNumber\": \"SFO{{addHAWB}}\",        \r\n    \"billofEntryNo\": \"I/2020/{{addHAWB}}\",\r\n    \"customStatus\": \"RED\"\r\n}\r\n\r\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment/billofentry",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment",
										"billofentry"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Get Timeslots Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp)\r",
											"//current_timestamp.setDate(current_timestamp.getUTCDate() + 1);\r",
											"current_timestamp.setDate(current_timestamp.getDate() + 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 10).replace(\"T\", \" \"))\r",
											"pm.environment.set(\"nextDay\",str);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Timeslots loaded Successfully\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.msg).to.eql(\"Time slots loaded successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify fetched slots are active\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var index = 0; index <= 1; index++) {\r",
											"        pm.expect(jsonData.data[index].active).to.eql(true);     \r",
											"    }  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// set timeslot as environment variable\r",
											"var response = JSON.parse(responseBody);\r",
											"impTS = response.data[2].slotTime\r",
											"impTS = impTS.slice(0, 13)\r",
											"pm.environment.set(\"impTimeSlot\", impTS)\r",
											"impSid=response.data[2].slotCode\r",
											"pm.environment.set(\"impSlotID\", impSid)\r",
											"slotstart=response.data[2].slotStartTime\r",
											"pm.environment.set(\"slotStart\", slotstart)\r",
											"slotend=response.data[2].slotEndTime\r",
											"pm.environment.set(\"slotEnd\", slotend)\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"appointmentDate\": \"{{nextDay}}\",\r\n  \"slotType\": \"Regular\",\r\n  \"vct\": 1,\r\n  \"shipments\": [\r\n    {\r\n      \"mawbNo\": null,\r\n      \"awbNo\": \"AWB-00-001\",\r\n      \"terminalCode\": \"GHQ\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    },{\r\n      \"mawbNo\": \"AWB-00-001\",\r\n      \"awbNo\": \"HBL-00-001\",\r\n      \"terminalCode\": \"GHQ\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment/import-timeslots",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment",
										"import-timeslots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Create Appointment Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status;\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    status = pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"       \r",
											"});\r",
											"\r",
											"if(status == 500){\r",
											"    pm.test(\"Appointment date is less than current date\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var myvar = jsonData.errorlst[0].error;    \r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Appointment Created Successfully\",function(){\r",
											"    var jsonData = pm.response.json();   \r",
											"    var appNo = jsonData.data.appointmentNo;\r",
											"    pm.test(\"Appointment Number - \"+appNo); \r",
											"    postman.setEnvironmentVariable(\"appointmentNo\", appNo);\r",
											"    postman.setEnvironmentVariable(\"ApptNo\", appNo);\r",
											"    pm.expect(jsonData.msg).to.eql(\"Appointment saved successfully\");\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp.toISOString())\r",
											"current_timestamp.setHours(current_timestamp.getHours() + 2); \r",
											"//console.log(current_timestamp.toISOString())\r",
											"pm.environment.set(\"current_timestamp\", current_timestamp.toISOString());\r",
											"\r",
											"vNo= Math.floor(100000 + Math.random() * 900000)\r",
											"pm.environment.set(\"vehicleNoappt\",vNo);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKeyDHL}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"appointmentNo\": null,\r\n    \"referenceID\": \"\",\r\n    \"appointmentDate\": \"{{nextDay}}\",\r\n    \"type\": \"imports\",\r\n    \"slotType\": \"Regular\",\r\n    \"slotTime\": \"{{impTimeSlot}}\",\r\n    \"paymentTerm\": \"Direct Checkin(Credit)\",\r\n    \"contactName\": \"Thomas Muller\",\r\n    \"contactEmail\": \"balakumaran.govardha@maqta.ae\",\r\n    \"contactNumber\": \"051468761\",\r\n    \"companyName\":\"AGILITY LOGISTICS\",\r\n    \"status\": \"Confirmed\",\r\n    \"slotCode\": \"{{impSlotID}}\",\r\n    \"slotStartTime\": \"{{slotStart}}\",\r\n    \"slotEndTime\": \"{{slotEnd}}\",\r\n    \"cargoType\": \"\",\r\n    \"awbDetails\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"b4d574a5-9880-4f2a-9aea-e882ea2328b5\",\r\n            \"awbReferenceNumber\": \"607-{{addMAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 200,\r\n            \"grossWeight\": 1450,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 1000,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"terminalCode\": \"GHQ\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": \"EY\",\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04(GHQ)\",\r\n            \"shcCode\": \"EAP,API\",\r\n            \"MawbTerminalCode\": \"GHQ\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        },\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"f45e4c87-526c-4eb1-8623-2506abb58951\",\r\n            \"awbReferenceNumber\": \"SFO{{addHAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 10,\r\n            \"grossWeight\": 1000,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 111,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"parentAWBReference\": \"607-{{addMAWB}}\",\r\n            \"terminalCode\": \"GHQ\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": null,\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04(GHQ)\",\r\n            \"shcCode\": \"EAP\",\r\n            \"MawbTerminalCode\": \"GHQ\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        }\r\n    ],\r\n    \"driverVehicles\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"driverName\": \"Thomas Muller\",\r\n            \"driverContactNo\": \"051468761\",\r\n            \"vehicleNo\": \"{{vehicleNoappt}}\",\r\n            \"vehicleType\": \"3 Ton\",\r\n            \"active\": true,\r\n            \"createdDate\": \"{{yesterday}}\",\r\n            \"createdBy\": \"System\",\r\n            \"checked\": true\r\n        }\r\n    ],\r\n    \"palletPieces\": 0,\r\n    \"nonPalletPieces\": 0,\r\n    \"appointmentDocuments\": [],\r\n    \"appointmentAdditionalServiceDTO\": [],\r\n    \"SpecialHanInstn\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.request.headers.add({ key: 'x-selected-org', value: pm.collectionVariables.get(\"SelectedOrg_DHL\")});",
									"",
									" pm.request.headers.add({key:'x-client-Id',value: 'EB30882C-C83D-468D-9A8A-CB23822203D7' });",
									"",
									"  pm.request.headers.add({key:'x-client-secret',value: 'NLzDQknON4yPgd1EOyeI1h7FyvpAWOLpWFkrtjCN4fITb039OmnlyLUOXwPWlJsn3EHur2HUO3PHRnaRY3vwaw53nOaPd8V3VPuZUHxpI8kPKvJPoQx0DzRIrXYV5aDW5hZnwhYC5cII0fv7IGwLz4iA00TK2upvI7p4cLnLTe4hpJuWpvjkB5N1CwRHmYjflg0x7YH3YhlMlVOIvZtDjvEUfTxsVPX6CnJlNa32lyrDgu7yyJz6syeG5gtZ56Bi' });",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Add Shipments + Create appt- Agility USED",
					"item": [
						{
							"name": "Imports: Add MAWB Shipment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"MAWB= Math.floor(10000000 + Math.random() * 90000000)\r",
											"pm.environment.set(\"addMAWB\",MAWB);\r",
											"\r",
											"//1- Aramex, 2-DHL, 3-  Agility, 4- Airlink, 5- Rais, 6- ADSO\r",
											"\r",
											"company= 3\r",
											"\r",
											"if (company=== 1) {\r",
											" pm.environment.set(\"companyName\",\"ARAMEX ABU DHABI\"); \r",
											" pm.environment.set(\"companyCode\",\"REG01760\");  \r",
											"}\r",
											"\r",
											"if (company=== 2) {\r",
											"pm.environment.set(\"companyName\",\"DHL GLOBAL FORWARDING\"); \r",
											"pm.environment.set(\"companyCode\",\"ComLSN263110\");  \r",
											"}\r",
											"\r",
											"if (company=== 3) {\r",
											"pm.environment.set(\"companyName\",\"AGILITY LOGISTICS\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA187\"); \r",
											"}\r",
											"\r",
											"if (company=== 4) {\r",
											"pm.environment.set(\"companyName\",\"AIRLINK INTERNATIONAL\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSML04\"); \r",
											"}\r",
											"\r",
											"if (company=== 5) {\r",
											"pm.environment.set(\"companyName\",\"RAIS HASSAN SAADI AND COMPANY LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSA22\"); \r",
											"}\r",
											"\r",
											"if (company=== 6) {\r",
											"pm.environment.set(\"companyName\",\"ADSO LLC\"); \r",
											"pm.environment.set(\"companyCode\",\"PCSEXP25703\"); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-selected-org",
										"value": "",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n   \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": null,\r\n  \"airportCode\":\"AUH\",\r\n   \"carrierCode\":\"EY\",\r\n   \"originCode\":\"DEL\",\r\n   \"destinationCode\":\"AUH\",\r\n   \"quantity\":\"10\",\r\n   \"quantityUnit\":\"pcs\",\r\n   \"grossWeight\":\"111\",\r\n   \"grossWeightUnit\":\"kgs\",\r\n   \"chargeableWeight\":\"111\",\r\n   \"chargeableWeightUnit\":\"kgs\",\r\n   \"commodityDescription\":\"API Collections\",\r\n   \"Comments\":\"Dated {{today}}: AS ADDRESSED FLY AS BOOKED CARGO NOTIFY CONSIGNEE UPON ARRIVAL DOCS DOCS  ATTACHED PLEASE HANDLE WITH CARE PLEASE HANDLE WITH  CAREREFRACTORY MATERIAL INV NO 107000181 DT. 23.12.2020 CMT98-88-62X1\",\r\n   \"shcCode\":\"EAP,HEA\",\r\n   \"shipmentStatus\": \"Arrived\",\r\n   \"shipmentCode\":\"T\",\r\n   \"messageType\":\"FWB\",\r\n   \"shipperDetails\":{\r\n      \"shipperName\":\"FAIR NEW EXPORTS INDIA PVT. LTD.\",\r\n      \"shipperAddress\":\"20 1 SITE IV INDUSTRIAL AREA SAHIBABAD\",\r\n      \"shipperPlace\":\"GHAZIABAD\",\r\n      \"shipperState\":\"UP\",\r\n      \"shipperCountryCode\":\"IN\",\r\n      \"shipperPostalCode\":\"600000\",\r\n      \"shipperContactNo\":\"545452\"\r\n   },\r\n   \"consigneeDetails\":{\r\n      \"consigneeName\":\"AL TAYEB INTERNATIONAL GENERAL TRADING LLC.\",\r\n      \"consigneeAddress\":\"PREMISE NUMBER 416996710 PO BOX NO410780 416 NAD AL HAMAR\",\r\n      \"consigneePlace\":\"DUBAI\",\r\n      \"consigneeState\":\"DUBAI\",\r\n      \"consigneeCountryCode\":\"AE\",\r\n      \"consigneePostalCode\":\"410780\",\r\n      \"consigneeContactNo\":\"654665\"\r\n   },\r\n   \"agentDetails\":{\r\n      \"agentName\":\"{{companyName}}\",\r\n      \"agentClassCode\":\"1431021\",\r\n      \"agentPlaceIssue\":\"NEW DELHI\"\r\n   }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add HAWB Shipments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWB= Math.floor(100000 + Math.random() * 99999)\r",
											"pm.environment.set(\"addHAWB\",HAWB);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Verify the MAWB is created\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"ImportShipment saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    pm.expect(response.data).to.equal(\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"shipmentType\": \"Import\",\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n  \"houseAwbNumber\": \"SFO{{addHAWB}}\",\r\n  \"airportCode\": \"AUH\",\r\n  \"carrierCode\": \"EY\",\r\n  \"originCode\": \"MLB\",\r\n  \"destinationCode\": \"AUH\",\r\n  \"quantity\": \"10\",\r\n  \"quantityUnit\": \"pcs\",\r\n  \"grossWeight\": \"100.00\",\r\n  \"grossWeightUnit\": \"kgs\",\r\n  \"chargeableWeight\": \"100.00\",\r\n  \"chargeableWeightUnit\": \"kgs\",\r\n  \"commodityGroup\": \"Pharaceuticals\",\r\n  \"commodityDescription\": \"vaccines\",\r\n   \"Comments\":\"please handle dangerous goods with care\",\r\n  \"billofEntryNo\": null,\r\n  \"shipmentStatus\": \"Arrived\",\r\n  \"shcCode\": \"EAP\",\r\n  \"shipmentCode\":\"T\",\r\n  \"messageType\":\"FHL\",\r\n   \"shipperDetails\": {\r\n    \"shipperName\": \"DHL Melbourne\",\r\n    \"shipperAddress\": \"Victoria\",\r\n    \"shipperPlace\": \"Melbourne\",\r\n    \"shipperState\": \"Victoria\",\r\n    \"shipperCountryCode\": \"Australia\",\r\n    \"shipperPostalCode\": \"122222\",\r\n    \"shipperContactNo\": \"971676666\"\r\n  },\r\n  \"consigneeDetails\": {\r\n    \"consigneeName\": \"Kuehne + Nagel International AG\",\r\n    \"consigneeAddress\": \"Airport Road\",\r\n    \"consigneePlace\": \"Abu Dhabi\",\r\n    \"consigneeState\": \"Abu Dhabi\",\r\n    \"consigneeCountryCode\": \"UAE\",\r\n    \"consigneePostalCode\": \"122\",\r\n    \"consigneeContactNo\": \"97877878787\"\r\n  },\r\n  \"agentDetails\": {    \r\n    \"agentName\": \"FedEx\",\r\n    \"agentClassCode\": null,\r\n    \"agentPlaceIssue\": null\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Flight Schedule 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Flight Schedules Added/Updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"yesterday\",str1);\r",
											"\r",
											"fNo= Math.floor(100 + Math.random() * 9999)\r",
											"pm.environment.set(\"flightNo\",fNo);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"FlightDetails\": [\r\n        {\r\n            \"origin\": \"DEL\",\r\n            \"destination\": \"AUH\",\r\n            \"carrierCode\": \"EY\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"estimatedArrival\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"FlightType\": \"P\",\r\n            \"Routing\": null,\r\n            \"FlightQualifier\": \"A\",\r\n            \"AirCraftType\": \"781\",\r\n            \"ParkingStand\": \"301\",\r\n            \"Gate\": \"70\",\r\n            \"RegistrationNumber\": \"A6BMB\",\r\n            \"CustomsReference\": \"A123\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-schedules",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-schedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Flight Details- Import  1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    //pm.expect(response.data).to.equal(\"Shipment flight detail successfully updated\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"rcvdDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"ShipmentType\": \"Import\",\r\n  \"messageType\": \"FFM\",\r\n  \"receivedDate\": \"{{rcvdDate}}\",\r\n  \"OriginDepartureInfo\": {\r\n    \"FlightNumber\": \"EY{{flightNo}}\",\r\n    \"scheduleDate\": \"{{yesterday}}\",\r\n    \"Airport\": \"DEL\",\r\n    \"AirCarftRegistration\": \"A6EIW\",\r\n    \"FirstPtOfArrival\": null\r\n  },\r\n  \"ManifestDetails\": {\r\n    \"ArrivalInfo\": {\r\n      \"airportCode\": \"AUH\",\r\n      \"ScheduledArrival\": \"{{yesterday}}\"\r\n    },\r\n    \"MAWB\": [\r\n      {\r\n        \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n        \"OriginCode\": \"DEL\",\r\n        \"shipmentCode\": \"T\",\r\n        \"DestinationCode\": \"AUH\",\r\n        \"quantity\": 200,\r\n        \"grossWeight\": 1450,\r\n        \"grossWeightUnit\": \"kgs\",\r\n        \"ULDNumber\": null,\r\n        \"IsBulk\": 1,\r\n        \"TotalQuantity\": 0,\r\n        \"GoodsDescription\": \"WATCH  WATCH BO\"\r\n      }\r\n        \r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/flight-manifest",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"flight-manifest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Pre DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Pre Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment')\r",
											"pm.environment.set(\"doNumber\", moment().format(\"DDMMYYYYHHMMSS\"))\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"Notes\": \"The above pre-arrival information can be used to initiate a Customs entry process through the Customs Portal. Once the cargo has been received, an updated message will be sent, showing the exact pieces and weight received, for this Delivery Order number.\",\r\n  \"NotifyDetails\": null,\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"EMIRATES SPECIALIZED CONTRACTING #{{TestNo}}\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{yesterday}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 200,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 1000.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP,ECC,GEN,GPA,TRB\",\r\n    \"TotalQuantity\": 200,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 1000.0,\r\n    \"TotalGrossWeightUnit\":\"\"    \r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 88,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 888.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 77,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 888.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"MACHINE PARTS\",\r\n    \"HandlingCodes\": \"NSC,SHR,COM,ECP,ECC\"\r\n  },\r\n  \"documentType\": \"PreDO\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: DO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the status of Response is success\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Delivery order saved successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success is true\");\r",
											"    pm.expect(response.errorlst).to.equal(null,\"Error field is null\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate()-1);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"IssueDate\",str);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str1 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FlightArrivalDate\",str1);\r",
											"\r",
											" var current_timestamp = new Date();\r",
											"current_timestamp.setDate(current_timestamp.getDate() - 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"//console.log(\"Current Time is\" + currTime)\r",
											"const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"pm.environment.set(\"FreightArrivalDate\",str2);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DoNumber\": \"{{doNumber}}23\",\r\n  \"IssueDate\": \"{{IssueDate}}\",\r\n  \"AirLine\": \"Etihad Airport Services CARGO\",\r\n  \"NotifyDetails\": \"Etihad Airport Services EAS\",\r\n  \"AgentDetails\": {\r\n    \"AgentName\": \"{{companyName}}\",\r\n    \"AgentCode\": \"{{companyCode}}\",\r\n    \"PoBox\": \"93971\",\r\n    \"Address\": \"Abu Dhabi AE 93971 100047214000003 TEL:0240002111\"\r\n  },\r\n  \"ConsigneeDetails\": {\r\n    \"ConsigneeName\": \"JManuels\",\r\n    \"Address\": \"HAMDAN street PO BOX NO.31232 TEL:0525555555\"\r\n  },\r\n  \"FlightDetails\": {\r\n    \"FlightNo\": \"EY{{flightNo}}\",\r\n    \"FlightDate\": \"{{yesterday}}\",\r\n    \"FlightArrivalDate\": \"{{FlightArrivalDate}}\",\r\n    \"FreightArrivalDate\": \"{{FreightArrivalDate}}\"\r\n  },\r\n  \"AwbDetails\": {\r\n    \"AWBNumber\": \"607-{{addMAWB}}\",\r\n    \"ExpectedQuantity\": 10,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 111.0,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"NatureofGoods\": \"Power Plant\",\r\n    \"HandlingCodes\": \"EAP\",\r\n    \"TotalQuantity\": 101,\r\n    \"TotalQuantityUnit\":\"pcs\",\r\n    \"TotalGrossWeight\": 101.0,\r\n    \"TotalGrossWeightUnit\":\"kgs\",\r\n    \"ChargeableWeight\": 202.0,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"rcfQuantity\": 10,\r\n    \"rcfWeight\": 111\r\n  },\r\n  \"HAwbDetails\": {\r\n    \"AWBNumber\": \"SFO{{addHAWB}}\",\r\n    \"TotalQuantity\": 10,\r\n    \"TotalQuantityUnit\":\"\",\r\n    \"TotalGrossWeight\": 100.00,\r\n    \"TotalGrossWeightUnit\":\"\",\r\n    \"ExpectedQuantity\": 100,\r\n    \"ExpectedQuantityUnit\": \"\",\r\n    \"ExpectedWeight\": 100.00,\r\n    \"ExpectedWeightUnit\":\"\",\r\n    \"ChargeableWeight\": 111.00,\r\n    \"rcfQuantity\": 10,\r\n    \"rcfWeight\": 104,\r\n    \"ChargeableWeightUnit\":\"kgs\",\r\n    \"NatureofGoods\": \"Machine pars such as propellot and turbines which are used for aircrafts.\",\r\n    \"HandlingCodes\": \"\"\r\n  },\r\n\"documentType\": \"DO\",\r\n\"ProcessedBy\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/import-deliveryorder",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"import-deliveryorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Add BOE details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"HAWBNO=pm.environment.get(\"addHAWB\");\r",
											"pm.globals.set(\"HAWBNOAppt\",HAWBNO);\r",
											"\r",
											"MAWBNO=pm.environment.get(\"addMAWB\");\r",
											"pm.globals.set(\"MAWBNOAppt\",MAWBNO);\r",
											"\r",
											"FlightNo=pm.environment.get(\"flightNo\");\r",
											"pm.globals.set(\"FlightNoAppt\",FlightNo);\r",
											"\r",
											"FlightDate=pm.environment.get(\"yesterday\");\r",
											"pm.globals.set(\"DateAppt\",FlightDate);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//**Checking success messages**\r",
											"pm.test(\"Bill of entry updated successfully\",function (){\r",
											"    pm.expect(response.msg).to.equal(\"Bill of entry updated successfully\");\r",
											"    pm.expect(response.success).to.equal(true,\"Success\");\r",
											"    //pm.expect(response.data).to.equal(null,\"success\");\r",
											"});\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"masterAwbNumber\": \"607-{{addMAWB}}\",\r\n    \"ShipmentType\": \"Import\",\r\n    \"houseAwbNumber\": \"SFO{{addHAWB}}\",        \r\n    \"billofEntryNo\": \"I/2020/{{addHAWB}}\",\r\n    \"customStatus\": \"RED\"\r\n}\r\n\r\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Shipment/integration/import-shipment/billofentry",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Shipment",
										"integration",
										"import-shipment",
										"billofentry"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Get Timeslots Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp)\r",
											"//current_timestamp.setDate(current_timestamp.getUTCDate() + 1);\r",
											"current_timestamp.setDate(current_timestamp.getDate() + 2);\r",
											"currTime = (current_timestamp.toISOString())\r",
											"console.log(\"Current Time is\" + currTime)\r",
											"const str = (current_timestamp.toISOString().slice(0, 10).replace(\"T\", \" \"))\r",
											"pm.environment.set(\"nextDay\",str);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Timeslots loaded Successfully\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.msg).to.eql(\"Time slots loaded successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify fetched slots are active\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    for (var index = 0; index <= 1; index++) {\r",
											"        pm.expect(jsonData.data[index].active).to.eql(true);     \r",
											"    }  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// set timeslot as environment variable\r",
											"var response = JSON.parse(responseBody);\r",
											"impTS = response.data[2].slotTime\r",
											"impTS = impTS.slice(0, 13)\r",
											"pm.environment.set(\"impTimeSlot\", impTS)\r",
											"impSid=response.data[2].slotCode\r",
											"pm.environment.set(\"impSlotID\", impSid)\r",
											"slotstart=response.data[2].slotStartTime\r",
											"pm.environment.set(\"slotStart\", slotstart)\r",
											"slotend=response.data[2].slotEndTime\r",
											"pm.environment.set(\"slotEnd\", slotend)\r",
											"\r",
											"if (responseCode.code ===200) {\r",
											"Count= pm.environment.get(\"TestNo\");\r",
											"var NoC=++Count;\r",
											"pm.environment.set(\"TestNo\",NoC); \r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"appointmentDate\": \"{{nextDay}}\",\r\n  \"slotType\": \"Regular\",\r\n  \"vct\": 1,\r\n  \"shipments\": [\r\n    {\r\n      \"mawbNo\": null,\r\n      \"awbNo\": \"AWB-00-001\",\r\n      \"terminalCode\": \"GHQ\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    },{\r\n      \"mawbNo\": \"AWB-00-001\",\r\n      \"awbNo\": \"HBL-00-001\",\r\n      \"terminalCode\": \"GHQ\",\r\n      \"arrivalDate\": \"{{nextDay}} 02:00:00 AM\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment/import-timeslots",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment",
										"import-timeslots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Create Appointment Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status;\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    status = pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"       \r",
											"});\r",
											"\r",
											"if(status == 500){\r",
											"    pm.test(\"Appointment date is less than current date\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var myvar = jsonData.errorlst[0].error;    \r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Appointment Created Successfully\",function(){\r",
											"    var jsonData = pm.response.json();   \r",
											"    var appNo = jsonData.data.appointmentNo;\r",
											"    pm.test(\"Appointment Number - \"+appNo); \r",
											"    postman.setEnvironmentVariable(\"appointmentNo\", appNo);\r",
											"    postman.setEnvironmentVariable(\"ApptNo\", appNo);\r",
											"    pm.expect(jsonData.msg).to.eql(\"Appointment saved successfully\");\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var current_timestamp = new Date();\r",
											"//console.log(current_timestamp.toISOString())\r",
											"current_timestamp.setHours(current_timestamp.getHours() + 2); \r",
											"//console.log(current_timestamp.toISOString())\r",
											"pm.environment.set(\"current_timestamp\", current_timestamp.toISOString());\r",
											"\r",
											"vNo= Math.floor(100000 + Math.random() * 900000)\r",
											"pm.environment.set(\"vehicleNoappt\",vNo);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"appointmentNo\": null,\r\n    \"referenceID\": \"\",\r\n    \"appointmentDate\": \"{{nextDay}}\",\r\n    \"type\": \"imports\",\r\n    \"slotType\": \"Regular\",\r\n    \"slotTime\": \"{{impTimeSlot}}\",\r\n    \"paymentTerm\": \"Direct Checkin(Credit)\",\r\n    \"contactName\": \"Thomas Muller\",\r\n    \"contactEmail\": \"balakumaran.govardha@maqta.ae\",\r\n    \"contactNumber\": \"051468761\",\r\n    \"companyName\":\"AGILITY LOGISTICS\",\r\n    \"status\": \"Confirmed\",\r\n    \"slotCode\": \"{{impSlotID}}\",\r\n    \"slotStartTime\": \"{{slotStart}}\",\r\n    \"slotEndTime\": \"{{slotEnd}}\",\r\n    \"cargoType\": \"\",\r\n    \"awbDetails\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"b4d574a5-9880-4f2a-9aea-e882ea2328b5\",\r\n            \"awbReferenceNumber\": \"607-{{addMAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 200,\r\n            \"grossWeight\": 1450,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 1000,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"terminalCode\": \"GHQ\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": \"EY\",\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04(GHQ)\",\r\n            \"shcCode\": \"EAP,API\",\r\n            \"MawbTerminalCode\": \"GHQ\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        },\r\n        {\r\n            \"referenceID\": null,\r\n            \"AwbReferenceId\": \"f45e4c87-526c-4eb1-8623-2506abb58951\",\r\n            \"awbReferenceNumber\": \"SFO{{addHAWB}}\",\r\n            \"shipper\": \"DHL Melbourne\",\r\n            \"consignee\": \"KARL HEINZ DIETRICH GMBH CO. KGKARL HEINZ DIETRICH GMBH\",\r\n            \"quantity\": 10,\r\n            \"grossWeight\": 1000,\r\n            \"grossWeightUnit\": \"kgs\",\r\n            \"chargeableWeight\": 111,\r\n            \"chargeableWeightUnit\": \"kgs\",\r\n            \"origin\": \"MLB\",\r\n            \"arrivalTime\": \"{{yesterday}}\",\r\n            \"actualArrival\": \"{{yesterday}}\",\r\n            \"scheduleDeparture\": null,\r\n            \"customStatus\": \"Inspection\",\r\n            \"createdBy\": \"System\",\r\n            \"createdDate\": null,\r\n            \"parentAWBReference\": \"607-{{addMAWB}}\",\r\n            \"terminalCode\": \"GHQ\",\r\n            \"dWellTime\": \"1 Day\",\r\n            \"carrierCode\": null,\r\n            \"destination\": \"AUH\",\r\n            \"flightDate\": \"{{yesterday}}\",\r\n            \"flightNumber\": \"EY{{flightNo}}\",\r\n            \"cutOffConfig\": null,\r\n            \"isEasAwb\": false,\r\n            \"companyCode\": \"{{companyCode}}\",\r\n            \"subTerminalCode\": \"Heavy Cargo - CT04(GHQ)\",\r\n            \"shcCode\": \"EAP\",\r\n            \"MawbTerminalCode\": \"GHQ\",\r\n            \"expectedArrival\": \"{{yesterday}}\",\r\n            \"isRenominated\": false\r\n        }\r\n    ],\r\n    \"driverVehicles\": [\r\n        {\r\n            \"referenceID\": null,\r\n            \"driverName\": \"Thomas Muller\",\r\n            \"driverContactNo\": \"051468761\",\r\n            \"vehicleNo\": \"{{vehicleNoappt}}\",\r\n            \"vehicleType\": \"3 Ton\",\r\n            \"active\": true,\r\n            \"createdDate\": \"{{yesterday}}\",\r\n            \"createdBy\": \"System\",\r\n            \"checked\": true\r\n        }\r\n    ],\r\n    \"palletPieces\": 0,\r\n    \"nonPalletPieces\": 0,\r\n    \"appointmentDocuments\": [],\r\n    \"appointmentAdditionalServiceDTO\": [],\r\n    \"SpecialHanInstn\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Appointment/api/Appointment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Appointment",
										"api",
										"Appointment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: Payment Charges Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var status;\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    status = pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"       \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Appointment confirmed Successfully\",function(){\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.msg).to.eql(\"Freight charges payment saved successfully\");\r",
											"});\r",
											"\r",
											"setTimeout(function(){}, [20000]);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-awbcharges",
										"value": "[{\"Key\":\"MAWB\",\"Value\":\"607-{{addMAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":\"T\"},{\"Key\":\"HAWB\",\"Value\":\"SFO{{addHAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":\"T\"},{\"Key\":\"MAWB\",\"Value\":\"607-{{addMAWB}}\",\"FlightNumber\":\"EY{{flightNo}}\",\"FlightDate\":\"{{yesterday}}\",\"ShipmentCode\":null}]",
										"type": "text",
										"disabled": true
									},
									{
										"key": "paymentType",
										"value": "Direct Checkin(Credit)",
										"type": "text",
										"disabled": true
									},
									{
										"key": "refereneceNo",
										"value": "{{appointmentNo}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "appointmentDate",
										"value": "{{nextDay}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "slottime",
										"value": "{{impTimeSlot}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AwbCharges\": [\r\n        {\r\n            \"Key\": \"MAWB\",\r\n            \"Value\": \"607-{{addMAWB}}\",\r\n            \"FlightNumber\": \"EY{{flightNo}}\",\r\n            \"FlightDate\": \"{{yesterday}}\",\r\n            \"ShipmentCode\": \"T\"\r\n        },\r\n        {\r\n            \"Key\": \"HAWB\",\r\n            \"Value\": \"SFO{{addHAWB}}\",\r\n            \"FlightNumber\": \"EY{{flightNo}}\",\r\n            \"FlightDate\": \"{{yesterday}}\",\r\n            \"ShipmentCode\": \"T\"\r\n        }        \r\n    ],\r\n    \"refereneceNo\": \"{{appointmentNo}}\",\r\n    \"appointmentDate\": \"{{nextDay}}\",\r\n    \"SlotTime\": \"{{impTimeSlot}}\",\r\n    \"paymentType\": \"Direct Checkin(Credit)\",    \r\n    \"SlotType\": \"Regular\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/Charges/import-shipment/payment-freight-charges",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"Charges",
										"import-shipment",
										"payment-freight-charges"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imports: NEW DLV",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// //1- Aramex, 2-DHL, 3-  Agility, 4- Airlink, 5- Rais, 6- ADSO 7-Micco 8- Rajab 9-Globe 10- Majid 11-LQ\r",
											"// //GL- Direct , Majid- Partial Credit\r",
											"\r",
											"// company= 3\r",
											"\r",
											"// if (company=== 1) {\r",
											"//  pm.environment.set(\"companyName\",\"ARAMEX ABU DHABI\"); \r",
											"//  pm.environment.set(\"companyCode\",\"REG01760\");  \r",
											"// }\r",
											"\r",
											"// if (company=== 2) {\r",
											"// pm.environment.set(\"companyName\",\"DHL GLOBAL FORWARDING\"); \r",
											"// pm.environment.set(\"companyCode\",\"ComLSN263110\");  \r",
											"// }\r",
											"\r",
											"// if (company=== 3) {\r",
											"// pm.environment.set(\"companyName\",\"AGILITY LOGISTICS\"); \r",
											"// pm.environment.set(\"companyCode\",\"PCSA187\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 4) {\r",
											"// pm.environment.set(\"companyName\",\"AIRLINK INTERNATIONAL\"); \r",
											"// pm.environment.set(\"companyCode\",\"PCSML04\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 5) {\r",
											"// pm.environment.set(\"companyName\",\"RAIS HASSAN SAADI AND COMPANY LLC\"); \r",
											"// pm.environment.set(\"companyCode\",\"PCSA22\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 6) {\r",
											"// pm.environment.set(\"companyName\",\"ADSO LLC\"); \r",
											"// pm.environment.set(\"companyCode\",\"PCSEXP25703\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 7) {\r",
											"// pm.environment.set(\"companyName\",\"Micco Logistics\"); \r",
											"// pm.environment.set(\"companyCode\",\"PCSEXP5467\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 8) {\r",
											"// pm.environment.set(\"companyName\",\"RAJAB CARGO SERVICES EST.\"); \r",
											"// pm.environment.set(\"companyCode\",\"REG01657\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 9) {\r",
											"// pm.environment.set(\"companyName\",\"GLOBELINK WEST STAR SHIPPING LLC\"); \r",
											"// pm.environment.set(\"companyCode\",\"ComLSN651250\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 10) {\r",
											"// pm.environment.set(\"companyName\",\"AL MAJID SHIPPING SERVICES\"); \r",
											"// pm.environment.set(\"companyCode\",\"PCSA241\"); \r",
											"// }\r",
											"\r",
											"// if (company=== 11) {\r",
											"// pm.environment.set(\"companyName\",\"Logiquest Logistics L.L.C.\"); \r",
											"// pm.environment.set(\"companyCode\",\"PCSEXP19\"); \r",
											"// }\r",
											"\r",
											"\r",
											"// var current_timestamp = new Date();\r",
											"// current_timestamp.setDate(current_timestamp.getDate());\r",
											"// currTime = (current_timestamp.toISOString())\r",
											"// //console.log(\"Current Time is\" + currTime)\r",
											"// const str2 = (current_timestamp.toISOString().slice(0, 19))\r",
											"// pm.environment.set(\"today\",str2);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mawbNumber\": \"607-{{addMAWB}}\",\r\n    \"hawbNumber\": \"SFO{{addHAWB}}\",\r\n    \"flightNo\": \"EY{{flightNo}}\",\r\n    \"flightDate\": \"{{yesterday}}\",\r\n    \"origin\": \"DEL\",\r\n    \"destination\": \"AUH\",\r\n    \"type\": \"T\",\r\n    \"pieces\": 10,\r\n    \"shCs\": \"EAP\",\r\n    \"agent\": \"{{companyName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/BaseGateway/Freight/api/shipment/integration/update-dlv-for-shipment",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"BaseGateway",
										"Freight",
										"api",
										"shipment",
										"integration",
										"update-dlv-for-shipment"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.request.headers.add({ key: 'x-selected-org', value: pm.collectionVariables.get(\"Selected_OrgFF\")});",
									"",
									" pm.request.headers.add({key:'x-client-Id',value: 'EB30882C-C83D-468D-9A8A-CB23822203D7' });",
									"",
									"  pm.request.headers.add({key:'x-client-secret',value: 'NLzDQknON4yPgd1EOyeI1h7FyvpAWOLpWFkrtjCN4fITb039OmnlyLUOXwPWlJsn3EHur2HUO3PHRnaRY3vwaw53nOaPd8V3VPuZUHxpI8kPKvJPoQx0DzRIrXYV5aDW5hZnwhYC5cII0fv7IGwLz4iA00TK2upvI7p4cLnLTe4hpJuWpvjkB5N1CwRHmYjflg0x7YH3YhlMlVOIvZtDjvEUfTxsVPX6CnJlNa32lyrDgu7yyJz6syeG5gtZ56Bi' });",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Selected_OrgEAS",
			"value": "",
			"type": "string"
		},
		{
			"key": "Selected_OrgRenom",
			"value": "",
			"type": "string"
		},
		{
			"key": "Selected_OrgFF",
			"value": "",
			"type": "string"
		},
		{
			"key": "Selected_OrgAgtA",
			"value": "",
			"type": "string"
		},
		{
			"key": "Selected_OrgAgtB",
			"value": "",
			"type": "string"
		},
		{
			"key": "Environment",
			"value": "",
			"type": "string"
		},
		{
			"key": "LoginPwd",
			"value": ""
		},
		{
			"key": "SelectedOrg_DHL",
			"value": ""
		},
		{
			"key": "Selected_Org",
			"value": ""
		}
	]
}